{"version":3,"sources":["numeric/index.ts","tenhou/index.ts","player/index.ts","components/util.tsx","components/calculation/basic.tsx","tenhou/tenhou.worker.ts","components/distribution/input.tsx","components/distribution/output.tsx","components/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sum","values","reduce","partial","current","individualResults","fromSimple","simpleDistribution","length","Error","1","2","3","4","toSimple","distribution","rewardOfField","gameTypeCoefficient","displayDan","internalDan","normalizeDistribution","f","ed","normalize","reward","er","field","result","gameType","danEfficiency","Infinity","_adv","map","adv","_dif","i","dif","danStructure","init","up","down","dans","_","promoteDemoteMatrix","structure","n","transition","eye","forEach","j","set","get","transpose","promotionProbs","promotion1g","zeros","Array","from","solve","data","e","pp","NDArray","dp","denom","DanIndependentPlayer","kind","_distribution","this","defaultPlayer","ArrayPlayer","distributions","currentDan","distributionFunction","functionBody","ret","undefined","Function","console","log","distributionFunctionString","FunctionPlayer","maxInternalDan","LazyCalculation","props","useState","CircularProgress","state","setState","useEffect","a","args","calculate","_tenhou","Worker","tenhou","wrap","DanInformationTable","Table","size","DanInformationHeader","TableBody","v","DanInformationRow","reverse","TableHead","TableRow","TableCell","href","promotionProb","promotionEG","demotionEG","SliderDistribution","slice","cumsum","Slider","onChange","warn","setValues","partialSums","totalSum","lhs","rhs","decumsum","value","min","max","TextDistribution","Grid","container","item","xs","TextField","event","parseFloat","target","FloatingPointDistributionDisplay","Typography","RadioSelector","choices","label","FormControl","FormLabel","RadioGroup","setValue","FormControlLabel","control","Radio","checked","FieldSelector","InputTypeSelector","PlayerTypeSelector","GameTypeSelector","Conditions","playerType","setPlayerType","inputType","setInputType","setField","setGameType","PlayerInput","player","setPlayer","defaultPlayerOf","PlayerDistributionInput","PlayerDistributionInfo","DanIndependentPlayerInput","setDistribution","ArrayPlayerInput","FunctionPlayerInput","setMaxInternalDan","setDistributionFunction","isError","error","style","backgroundColor","fullWidth","multiline","margin","rows","rowsMax","variant","_dans","Button","DistributionInput","Distribution","widths","justify","spacing","initialState","App","React","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31ef253a.chunk.js","sourcesContent":["export const iota = (length: number) => Array.from({length: length}, (v, k) => k);\r\n\r\nexport function cumsum(values: number[]): [number[], number]\r\n{\r\n    let ret = values.slice(0, -1)\r\n    ret.forEach((v, i) =>\r\n    {\r\n        if (i) ret[i] += ret[i-1]\r\n    })\r\n    return [ret, ret.slice(-1)[0] + values.slice(-1)[0]]\r\n}\r\n\r\nexport function decumsum(partialSums: number[], totalSum: number)\r\n{\r\n    const lhs = [...partialSums, totalSum]\r\n    const rhs = [0, ...partialSums]\r\n    return lhs.map((v, i) => v-rhs[i])\r\n}\r\n\r\nexport const sum = (values: number[]) => values.reduce((partial: number, current: number) => partial + current, 0)\r\n","import { eye, NDArray, zeros } from 'vectorious'\n\nimport { sum } from '../numeric'\n\nexport const fields = ['鳳', '特', '上', '般'] as const\nexport const gameTypes = ['東', '南'] as const\nexport const individualResults = [1, 2, 3, 4] as const\n\nexport type Field = typeof fields[number]\nexport type GameType = typeof gameTypes[number]\nexport type IndividualResult = typeof individualResults[number]\nexport type Distribution = {\n    1: number,\n    2: number,\n    3: number,\n    4: number,\n}\nexport type SimpleDistribution = number[]\nexport function fromSimple(simpleDistribution: SimpleDistribution): Distribution\n{\n    if (simpleDistribution.length !== 4)\n        throw new Error('simpleDistribution must be of length 4')\n    return {\n        1: simpleDistribution[0],\n        2: simpleDistribution[1],\n        3: simpleDistribution[2],\n        4: simpleDistribution[3],\n    }\n}\nexport function toSimple(distribution: Distribution): SimpleDistribution\n{\n    return [\n        distribution[1],\n        distribution[2],\n        distribution[3],\n        distribution[4],\n    ]\n}\nexport const rewardOfField = {\n    '般': [2, 1],\n    '上': [4, 1],\n    '特': [5, 2],\n    '鳳': [6, 3],\n}\nexport const gameTypeCoefficient = {\n    '東': 2,\n    '南': 3,\n}\nexport const basePoint = 5\nexport function displayDan(internalDan: number)\n{\n    if (internalDan < 3)\n        return `${3-internalDan}K`\n    return `${internalDan-2}D`\n}\nexport const goal = 13;\nexport type Environment =\n{\n    field: Field,\n    internalDan: number,\n    gameType: GameType,\n}\nexport type EnvResult = Environment & {result: IndividualResult}\nexport type EnvDist = Environment & {distribution: Distribution}\nconst normalizeDistribution = <R>(f: (ed: EnvDist) => R) =>\n{\n    return (ed: EnvDist) => f({...ed, distribution: normalize(ed.distribution)})\n}\n\nexport function reward(er: EnvResult)\n{\n    return typeIndependentReward(er.field, er.result, er.internalDan) * gameTypeCoefficient[er.gameType]\n}\nexport function typeIndependentReward(field: Field, result: IndividualResult, internalDan: number)\n{\n    if (result <= 2)\n        return rewardOfField[field][result-1] * basePoint\n    if (result === 4)\n        return -internalDan * basePoint\n    return 0\n}\nexport function danEfficiency(field: Field, distribution: Distribution)\n{\n    if (distribution[4] === 0)\n        return Infinity\n    return (rewardOfField[field][0] * distribution[1] +\n            rewardOfField[field][1] * distribution[2]) /\n            distribution[4]\n}\nconst _adv = (ed: EnvDist) => sum(individualResults.map((result: IndividualResult) =>\n        reward({...ed, result}) * ed.distribution[result]))\nexport const adv = normalizeDistribution(_adv)\nconst _dif = (ed: EnvDist) => sum(individualResults.map((result: IndividualResult, i: number) =>\n        reward({...ed, result}) ** 2 * ed.distribution[result]))\nexport const dif = normalizeDistribution(_dif)\nexport function peclet(ed: EnvDist): number\n{\n    return _adv(ed) / _dif(ed)\n}\nexport type StructureElement =\n{\n    init: number,\n    up: number,\n    down: number,\n}\nexport const danStructure: StructureElement[] = [\n    {init:    0, up:  100, down: -100}, // 3K\n    {init:    0, up:  100, down: -100},\n    {init:    0, up:  100, down: -100},\n    {init:  200, up:  400, down:    0}, // 1D\n    {init:  400, up:  800, down:    0},\n    {init:  600, up: 1200, down:    0},\n    {init:  800, up: 1600, down:    0}, // 4D\n    {init: 1000, up: 2000, down:    0},\n    {init: 1200, up: 2400, down:    0},\n    {init: 1400, up: 2800, down:    0}, // 7D\n    {init: 1600, up: 3200, down:    0},\n    {init: 1800, up: 3600, down:    0},\n    {init: 2000, up: 4000, down:    0}, // 10D\n]\nexport const dans = danStructure.map((_, i) => i)\nfunction init(internalDan: number)\n{\n    const structure = danStructure[internalDan]\n    return (structure.init - structure.down) / basePoint\n}\nexport function promotionProb(ed: EnvDist): number\n{\n    return promotionProbs(ed)[init(ed.internalDan)]\n}\nconst promoteDemoteMatrix = normalizeDistribution((ed: EnvDist) =>\n{\n    const structure = danStructure[ed.internalDan]\n    const n = (structure.up - structure.down) / basePoint\n\n    let transition = eye(n)\n    for (let i = 0; i < n; i++)\n    {\n        individualResults.forEach((result: IndividualResult) =>\n        {\n            const j = i + reward({...ed, result}) / basePoint\n            if (0 <= j && j < n)\n            {\n                transition.set(i, j, transition.get(i, j) - ed.distribution[result])\n            }\n        })\n    }\n    return transition.transpose()\n})\nexport const promotionProbs = normalizeDistribution((ed: EnvDist) =>\n{\n    const structure = danStructure[ed.internalDan]\n    const n = (structure.up - structure.down) / basePoint\n    let promotion1g = zeros(n, 1)\n    for (let i = 0; i < n; i++)\n    {\n        individualResults.forEach((result: IndividualResult) =>\n        {\n            const j = i + reward({...ed, result}) / basePoint\n            if ((j < 0 || n <= j) && (0 < reward({...ed, result})))\n            {\n                promotion1g.set(i, 0, promotion1g.get(i, 0) - ed.distribution[result])\n            }\n        })\n    }\n    return Array.from(promoteDemoteMatrix(ed).solve(promotion1g).data.map((e: number) => -e))\n})\nexport const promotionEGs = normalizeDistribution((ed: EnvDist) =>\n{\n    const pp = promotionProbs(ed)\n    return Array.from(promoteDemoteMatrix(ed).solve(new NDArray(pp.map((e) => [e]))).data.map((e: number, i: number) => e/pp[i]))\n})\nexport function promotionEG(ed: EnvDist)\n{\n    return promotionEGs(ed)[init(ed.internalDan)]\n}\nexport const demotionEGs = normalizeDistribution((ed: EnvDist) =>\n{\n    const dp = promotionProbs(ed).map((e) => 1-e)\n    return Array.from(promoteDemoteMatrix(ed).solve(new NDArray(dp.map((e) => [e]))).data.map((e: number, i: number) => e/dp[i]))\n})\nexport function demotionEG(ed: EnvDist)\n{\n    return demotionEGs(ed)[init(ed.internalDan)]\n}\nexport function normalize(distribution: Distribution): Distribution\n{\n    const denom = sum(toSimple(distribution))\n    return {\n        1: distribution[1] / denom,\n        2: distribution[2] / denom,\n        3: distribution[3] / denom,\n        4: distribution[4] / denom,\n    }\n}\n","import { Distribution, fromSimple } from \"../tenhou\";\r\n\r\nexport const playerTypes = ['independent', 'array', 'function'] as const\r\nexport type PlayerType = typeof playerTypes[number]\r\n\r\nexport class DanIndependentPlayer\r\n{\r\n    kind: 'independent' = 'independent'\r\n    private _distribution: Distribution\r\n    constructor (distribution: Distribution)\r\n    {\r\n        this._distribution = distribution\r\n    }\r\n    distribution(): Distribution\r\n    {\r\n        return this._distribution\r\n    }\r\n    setDistribution(distribution: Distribution)\r\n    {\r\n        this._distribution = distribution\r\n        return this\r\n    }\r\n}\r\n\r\nexport const defaultPlayer = new DanIndependentPlayer(fromSimple([2500, 2500, 2500, 2500]))\r\n\r\nexport class ArrayPlayer\r\n{\r\n    kind: 'array' = 'array'\r\n    distributions: Distribution[]\r\n    constructor (distributions: Distribution[])\r\n    {\r\n        this.distributions = distributions\r\n    }\r\n    distribution(currentDan: number): Distribution\r\n    {\r\n        return this.distributions[currentDan]\r\n    }\r\n    setDistribution(distribution: Distribution, currentDan: number)\r\n    {\r\n        this.distributions[currentDan] = distribution\r\n        return this\r\n    }\r\n    distributionLength()\r\n    {\r\n        return this.distributions.length\r\n    }\r\n}\r\n\r\ntype DistributionFunction =\r\n{\r\n    distributionFunctionString: string,\r\n    distributionFunction?: (currentDan: number) => Distribution,\r\n}\r\nexport function distributionFunction(functionBody: string): DistributionFunction\r\n{\r\n    let ret: undefined | ((currentDan: number) => Distribution) = undefined\r\n    try\r\n    {\r\n        ret = (currentDan: number) => fromSimple((new Function('dan', functionBody) as ((currentDan: number) => number[]))(currentDan))\r\n    }\r\n    catch (e)\r\n    {\r\n        console.log(e)\r\n    }\r\n    try\r\n    {\r\n        if (ret !== undefined) ret(0)\r\n    }\r\n    catch (e)\r\n    {\r\n        console.log(e)\r\n    }\r\n    return {\r\n        distributionFunctionString: functionBody,\r\n        distributionFunction: ret\r\n    }\r\n}\r\n\r\nexport class FunctionPlayer\r\n{\r\n    kind: 'function' = 'function'\r\n    distributionFunction: DistributionFunction\r\n    maxInternalDan: number\r\n    constructor (distributionFunction: DistributionFunction, maxInternalDan: number)\r\n    {\r\n        this.distributionFunction = distributionFunction\r\n        this.maxInternalDan = maxInternalDan\r\n    }\r\n    setMaxInternalDan(maxInternalDan: number)\r\n    {\r\n        this.maxInternalDan = maxInternalDan\r\n        return this\r\n    }\r\n    setDistributionFunction(functionBody: string)\r\n    {\r\n        return new FunctionPlayer(distributionFunction(functionBody), this.maxInternalDan)\r\n    }\r\n}\r\n\r\nexport type Player = DanIndependentPlayer | ArrayPlayer | FunctionPlayer\r\nexport function defaultPlayerOf(playerType: PlayerType): Player\r\n{\r\n    switch (playerType)\r\n    {\r\n        case \"independent\": return new DanIndependentPlayer(fromSimple([2500, 2500, 2500, 2500]))\r\n        case 'array': return new ArrayPlayer([\r\n            fromSimple([250, 250, 250, 250]), // 3K\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 1D\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 4D\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 7D\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 10D\r\n        ])\r\n        case 'function': return new FunctionPlayer(\r\n            distributionFunction('return [2500, 2500, 2500, 2500]'),\r\n            13)\r\n    }\r\n}","import { useEffect, useState } from 'react'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nexport function LazyCalculation<P, S>(props: {f: (props: P) => Promise<S>, args: P})\r\n{\r\n    const [state, setState] = useState(<CircularProgress />)\r\n    useEffect(() =>\r\n    {\r\n        const calculate = async() =>\r\n        {\r\n            const result = await props.f(props.args)\r\n            setState(<>{result}</>)\r\n        }\r\n        calculate()\r\n        return () => setState(<CircularProgress />)\r\n    }, [props.args])\r\n    return <>{state}</>\r\n}\r\n","import { wrap } from 'comlink'\r\n\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\n\r\nimport { adv, danEfficiency, dif, displayDan, Distribution, EnvDist, Field, GameType, peclet } from '../../tenhou'\r\n\r\nimport { LazyCalculation } from '../util'\r\n\r\nimport tenhouWorker from '../../tenhou/tenhou.worker'\r\nconst _tenhou = new tenhouWorker()\r\nconst tenhou: any = wrap(_tenhou)\r\n\r\nexport function DanInformationTable(props:\r\n{\r\n    distribution: (internalDan: number) => Distribution,\r\n    danEfficiency: boolean,\r\n    dans: number[],\r\n    field: Field,\r\n    gameType: GameType,\r\n})\r\n{\r\n    return <Table size=\"small\">\r\n        <DanInformationHeader danEfficiency={props.danEfficiency}/>\r\n        <TableBody>{props.dans.map((v: number, i: number) => <DanInformationRow\r\n            key={i}\r\n            danEfficiency={props.danEfficiency}\r\n            field={props.field}\r\n            distribution={props.distribution(v)}\r\n            internalDan={v}\r\n            gameType={props.gameType}\r\n        />).reverse()}</TableBody>\r\n    </Table>\r\n}\r\nfunction DanInformationHeader(props: {\r\n    danEfficiency: boolean\r\n})\r\n{\r\n    return <TableHead><TableRow>\r\n    <TableCell>@</TableCell>\r\n    {props.danEfficiency ? <TableCell>DE</TableCell> : <></>}\r\n    <TableCell>adv</TableCell>\r\n    <TableCell>dif</TableCell>\r\n    <TableCell><a href=\"https://note.com/chanpukin/n/ne668771fe917#nhceu\">Pe</a></TableCell>\r\n    <TableCell>P↑</TableCell>\r\n    <TableCell>E↑</TableCell>\r\n    <TableCell>E↓</TableCell>\r\n    </TableRow></TableHead>\r\n}\r\nfunction DanInformationRow(props: EnvDist & {danEfficiency: boolean})\r\n{\r\n    return <TableRow>\r\n    <TableCell>{displayDan(props.internalDan)}</TableCell>\r\n    {props.danEfficiency ? <TableCell>{danEfficiency(props.field, props.distribution)}</TableCell> : <></>}\r\n    <TableCell>{adv(props)}</TableCell>\r\n    <TableCell>{dif(props)}</TableCell>\r\n    <TableCell>{peclet(props)}</TableCell>\r\n    <TableCell><LazyCalculation args={props} f={tenhou.promotionProb} /></TableCell>\r\n    <TableCell><LazyCalculation args={props} f={tenhou.promotionEG} /></TableCell>\r\n    <TableCell><LazyCalculation args={props} f={tenhou.demotionEG} /></TableCell>\r\n    </TableRow>\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/tenhou.worker.8d26eaad.js\");\n}\n","import Grid from '@material-ui/core/Grid'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nimport { cumsum, decumsum } from '../../numeric'\r\n\r\nexport function SliderDistribution(props: {values: number[], setValues: (values: number[]) => void})\r\n{\r\n    const a = cumsum(props.values)\r\n    return <Slider onChange={(e, values: number[] | number) =>\r\n        {\r\n            if (typeof values === 'number')\r\n                console.warn('single slider.value')\r\n            else\r\n                props.setValues(decumsum(values, a[1]))\r\n        }}\r\n        value={a[0]}\r\n        min={0}\r\n        max={a[1]}\r\n        />\r\n}\r\n\r\nexport function TextDistribution(props: {values: number[], setValues: (values: number[]) => void})\r\n{\r\n    return <Grid container>\r\n        {props.values.map((v, i) => <Grid item xs={3} key={i}><TextField value={v} onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n            {\r\n                let values = [...props.values]\r\n                values[i] = parseFloat(event.target.value)\r\n                props.setValues(values)\r\n            }}/></Grid>)}\r\n    </Grid>\r\n}\r\n","import Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { sum } from '../../numeric'\r\n\r\nexport function FloatingPointDistributionDisplay(props: {values: number[]})\r\n{\r\n    const a = sum(props.values)\r\n    return <Grid container>\r\n        {props.values.map((v, i) => <Grid item xs={3} key={i}><Typography>\r\n            {v/a}\r\n        </Typography></Grid>)}\r\n    </Grid>\r\n}\r\n","import React from 'react'\n\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Grid from '@material-ui/core/Grid'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Slider from '@material-ui/core/Slider'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { ArrayPlayer, DanIndependentPlayer, defaultPlayerOf, FunctionPlayer, Player, PlayerType, playerTypes } from '../player'\nimport {\n    Field, fields,\n    dans,\n    danEfficiency,\n    displayDan,\n    fromSimple, toSimple,\n    GameType, gameTypes,\n} from '../tenhou'\n\nimport { DanInformationTable } from './calculation/basic'\nimport { SliderDistribution, TextDistribution } from './distribution/input'\nimport { FloatingPointDistributionDisplay } from './distribution/output'\n\nexport const inputTypes = ['slider', 'text'] as const\nexport type InputType = typeof inputTypes[number]\n\nexport function RadioSelector<LT extends string>(choices: readonly LT[], label: string = '')\n{\n    return (props: {\n        value: LT,\n        setValue: (value: LT) => void,\n    }) => <FormControl>\n        <FormLabel>{label}</FormLabel>\n        <RadioGroup onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.setValue(event.target.value as LT)}>\n            {choices.map((v: LT) =>\n                <FormControlLabel control={<Radio />} value={v} label={v} checked={v === props.value} />\n            )}\n        </RadioGroup>\n    </FormControl>\n}\n\nconst FieldSelector = RadioSelector<Field>(fields, 'Field')\nconst InputTypeSelector = RadioSelector<InputType>(inputTypes, 'Input Type')\nconst PlayerTypeSelector = RadioSelector<PlayerType>(playerTypes, 'Player Type')\nconst GameTypeSelector = RadioSelector<GameType>(gameTypes, 'Game Type')\n\nexport function Conditions(props:\n{\n    playerType: PlayerType, setPlayerType: (playreType: PlayerType) => void,\n    inputType: InputType, setInputType: (inputType: InputType) => void,\n    field: Field, setField: (field: Field) => void,\n    gameType: GameType, setGameType: (gameType: GameType) => void,\n})\n{\n    return <Grid container>\n        <Grid item><PlayerTypeSelector\n            value={props.playerType}\n            setValue={props.setPlayerType} /></Grid>\n        <Grid item><InputTypeSelector\n            value={props.inputType}\n            setValue={props.setInputType} /></Grid>\n        <Grid item><FieldSelector\n            value={props.field}\n            setValue={props.setField} /></Grid>\n        <Grid item><GameTypeSelector\n            value={props.gameType}\n            setValue={props.setGameType} /></Grid>\n    </Grid>\n}\n\nexport function PlayerInput(props:\n{\n    player: Player, setPlayer: (player: Player) => void,\n    inputType: InputType, setInputType: (inputType: InputType) => void,\n    field: Field, setField: (field: Field) => void,\n    gameType: GameType, setGameType: (gameType: GameType) => void,\n})\n{\n    return <>\n        <Conditions\n            playerType={props.player.kind}\n            setPlayerType={(playerType: PlayerType) => props.setPlayer(defaultPlayerOf(playerType))}\n            {...props}\n        />\n        <PlayerDistributionInput {...props} />\n        <PlayerDistributionInfo {...props} />\n    </>\n}\nfunction PlayerDistributionInput(props:\n{\n    player: Player, setPlayer: (player: Player) => void,\n    inputType: InputType,\n    field: Field,\n    gameType: GameType,\n})\n{\n    if (props.player.kind === 'independent')\n    {\n        return <DanIndependentPlayerInput\n            values={toSimple(props.player.distribution())}\n            setValues={(values: number[]) =>\n                props.setPlayer((props.player as DanIndependentPlayer).setDistribution(fromSimple(values)))}\n            {...props} />\n    }\n    else if (props.player.kind === 'array')\n    {\n        return <ArrayPlayerInput\n            values={props.player.distributions.map(toSimple)}\n            setValues={(values: number[], i: number) =>\n                props.setPlayer((props.player as ArrayPlayer).setDistribution(fromSimple(values), i))}\n            {...props} />\n    }\n    else\n    {\n        return <FunctionPlayerInput\n            maxInternalDan={props.player.maxInternalDan}\n            setMaxInternalDan={(maxInternalDan: number) => props.setPlayer((props.player as FunctionPlayer).setMaxInternalDan(maxInternalDan))}\n            value={props.player.distributionFunction.distributionFunctionString}\n            setValue={(value: string) => props.setPlayer((props.player as FunctionPlayer).setDistributionFunction(value))}\n            isError={(props.player as FunctionPlayer).distributionFunction.distributionFunction === undefined}\n            {...props} />\n    }\n}\n\nfunction FunctionPlayerInput(props:\n{\n    field: Field, gameType: GameType,\n    maxInternalDan: number,\n    setMaxInternalDan: (maxInternalDan: number) => void,\n    value: string,\n    setValue: (value: string) => void,\n    isError: boolean,\n})\n{\n    return <>\n    <Grid container>\n        <Grid item xs={4}>\n            <Typography>段位上限 (exclusive): {props.maxInternalDan} ({displayDan(props.maxInternalDan)})</Typography>\n        </Grid>\n        <Grid item xs><Slider min={1} max={23}\n            value={props.maxInternalDan} onChange={(e, v) =>\n            {\n                if (typeof v === 'number')\n                    props.setMaxInternalDan(v)\n                else\n                    console.error('multiple maxInternalDan values')\n            }} /></Grid>\n    </Grid>\n    <div style={props.isError ? {backgroundColor: '#ffeeee'} : {}}>\n    <Typography>{\"// dan: 現在段位 (k級: 3-k; d段: d+2)\"}</Typography>\n    <Typography>function distribution(dan: number)</Typography>\n    <Typography>{'{'}</Typography>\n    <Grid container>\n    <Grid item xs={1}></Grid>\n    <Grid item xs><TextField fullWidth multiline margin='dense' rows={10} rowsMax={20} variant='filled'\n        value={props.value} onChange={(e) => props.setValue(e.target.value)} />\n    </Grid>\n    </Grid>\n    <Typography>{'}'}</Typography>\n    <Typography>{\"// 返却値: [1位, 2位, 3位, 4位] 比率 (合計は非0であればよい: 正規化は自動)\"}</Typography>\n    </div>\n    </>\n}\n\nfunction PlayerDistributionInfo(props:\n{\n    player: Player,\n    field: Field,\n    gameType: GameType,\n})\n{\n    // TODO: appropriate polymorphism\n    const distribution =\n        props.player.kind === 'independent'\n        ? (internalDan: number) => (props.player as DanIndependentPlayer).distribution()\n        : props.player.kind === 'array'\n        ? (internalDan: number) => (props.player as ArrayPlayer).distributions[internalDan]\n        : (internalDan: number) => (props.player as FunctionPlayer).distributionFunction.distributionFunction!(internalDan)\n    const _dans =\n        props.player.kind === 'array'\n        ? props.player.distributions.map((_, i) => i)\n        : dans\n    const danEfficiency =\n        props.player.kind !== 'independent'\n    if (props.player.kind === 'function' && props.player.distributionFunction.distributionFunction === undefined)\n        return <Typography>Error in distribution(dan) function definition</Typography>\n    return <DanInformationTable\n        distribution={distribution}\n        dans={_dans}\n        danEfficiency={danEfficiency}\n        {...props} />\n}\nexport function ArrayPlayerInput(props:\n{\n    field: Field,\n    gameType: GameType,\n    inputType: InputType,\n    values: number[][],\n    setValues: (values: number[], at: number) => void,\n})\n{\n    return <div>\n        <Button variant=\"outlined\">+</Button>\n        {props.values.map((values, i) =>\n        <DistributionInput\n            inputType={props.inputType}\n            internalDan={i}\n            values={values}\n            setValues={(values: number[]) => props.setValues(values, i)}\n            key={i}\n        />).reverse()}\n    </div>\n}\n\nexport function DanIndependentPlayerInput(props: {\n    inputType: InputType,\n    gameType: GameType,\n    values: number[],\n    setValues: (values: number[]) => void,\n    field: Field,\n})\n{\n    return <><DistributionInput\n        inputType={props.inputType}\n        values={props.values}\n        setValues={props.setValues}\n    /><Grid container>\n        <Grid item xs={6}><Typography>DE={danEfficiency(props.field, fromSimple(props.values))-2}</Typography></Grid>\n        <Grid></Grid>\n    </Grid>\n    </>\n}\n\nexport function DistributionInput(props: {values: number[], setValues: (values: number[]) => void, inputType: InputType, internalDan?: number})\n{\n    const Distribution = (props.inputType === 'slider' ? SliderDistribution : TextDistribution)\n    let widths: [3|4|5|6|7|8, 3|4|5|6|7|8] = props.inputType === 'slider' ? [8, 4] : [6, 6]\n    if (props.internalDan !== undefined)\n    {\n        widths[1] -= 1\n    }\n    return <Grid container justify=\"space-around\" spacing={1}>\n            {props.internalDan !== undefined ? <Grid item xs={1}><Typography>{displayDan(props.internalDan)}</Typography></Grid> : <></> }\n            <Grid item xs={widths[0]}><Distribution values={props.values} setValues={props.setValues} /></Grid>\n            <Grid item xs={widths[1]}><FloatingPointDistributionDisplay values={props.values} /></Grid>\n        </Grid>\n}\n","import Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport './App.css'\nimport { PlayerInput, InputType } from './components'\nimport { Player, defaultPlayer } from './player'\nimport { Field, GameType } from './tenhou'\n\ntype AppState =\n{\n    field: Field,\n    inputType: InputType,\n    player: Player,\n    gameType: GameType,\n}\nconst initialState: AppState =\n{\n    field: '鳳',\n    inputType: 'slider',\n    player: defaultPlayer,\n    gameType: '南'\n}\n\nfunction App() {\n    const [state, setState] = React.useState(initialState)\n    return <><PlayerInput\n            field={state.field}\n            setField={(field: Field) => setState({...state, field})}\n            inputType={state.inputType}\n            setInputType={(inputType: InputType) => setState({...state, inputType})}\n            player={state.player}\n            setPlayer={(player: Player) => setState({...state, player})}\n            gameType={state.gameType}\n            setGameType={(gameType: GameType) => setState({...state, gameType})}\n        />\n        <Typography><ul>\n            <li>卓の昇降なし: 常に同じ卓で (七段未満も鳳凰卓で, etc) 打ち続ける</li>\n            <li>3級–1級の昇降あり: 初期0, 昇段100, 降段-100 を仮定</li>\n        </ul></Typography>\n        </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}