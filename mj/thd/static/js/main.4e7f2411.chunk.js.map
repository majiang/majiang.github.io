{"version":3,"sources":["numeric/index.ts","tenhou/index.ts","player/index.ts","components/util.tsx","components/calculation/basic.tsx","tenhou/tenhou.worker.ts","components/distribution/input.tsx","components/distribution/output.tsx","components/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["iota","length","Array","from","v","k","sum","values","reduce","partial","current","individualResults","fromSimple","simpleDistribution","Error","1","2","3","4","toSimple","distribution","rewardOfField","gameTypeCoefficient","displayDan","internalDan","normalizeDistribution","f","ed","normalize","reward","er","field","result","gameType","danEfficiency","Infinity","_adv","map","adv","_dif","i","dif","danStructure","init","up","down","_","promoteDemoteMatrix","structure","n","transition","eye","forEach","j","set","get","transpose","promotionProbs","promotion1g","zeros","solve","data","e","pp","NDArray","dp","denom","DanIndependentPlayer","kind","maxInternalDan","distributions","this","defaultPlayer","ArrayPlayer","ret","SoundFunctionPlayer","functionBody","undefined","state","BrokenFunctionPlayer","functionPlayer","currentDan","Function","LazyCalculation","props","cp","CircularProgress","size","useState","setState","args","useEffect","subscribed","then","_tenhou","Worker","tenhou","wrap","DanInformationTable","Table","DanInformationHeader","TableBody","DanInformationRow","reverse","TableHead","TableRow","TableCell","href","promotionProb","promotionEG","demotionEG","SliderDistribution","a","slice","cumsum","Slider","onChange","console","warn","setValues","partialSums","totalSum","lhs","rhs","decumsum","value","min","max","TextDistribution","Grid","container","item","xs","TextField","event","parseFloat","target","FloatingPointDistributionDisplay","Typography","RadioSelector","choices","label","FormControl","FormLabel","RadioGroup","setValue","FormControlLabel","control","Radio","checked","FieldSelector","InputTypeSelector","PlayerTypeSelector","GameTypeSelector","Conditions","playerType","setPlayerType","inputType","setInputType","setField","setGameType","PlayerInput","player","setPlayer","defaultPlayerOf","PlayerDistributionInput","PlayerDistributionInfo","DanIndependentPlayerInput","ArrayPlayerInput","withDistribution","FunctionPlayerInput","setMaxInternalDan","isError","error","style","backgroundColor","fullWidth","multiline","margin","rows","rowsMax","variant","Button","DistributionInput","Distribution","widths","justify","spacing","initialState","App","React","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wZAAaA,EAAO,SAACC,GAAD,OAAoBC,MAAMC,KAAK,CAACF,OAAQA,IAAS,SAACG,EAAGC,GAAJ,OAAUA,MAmBxE,IAAMC,EAAM,SAACC,GAAD,OAAsBA,EAAOC,QAAO,SAACC,EAAiBC,GAAlB,OAAsCD,EAAUC,IAAS,I,QCbnGC,EAAoB,CAAC,EAAG,EAAG,EAAG,GAYpC,SAASC,EAAWC,GAEvB,GAAkC,IAA9BA,EAAmBZ,OACnB,MAAM,IAAIa,MAAM,0CACpB,MAAO,CACHC,EAAGF,EAAmB,GACtBG,EAAGH,EAAmB,GACtBI,EAAGJ,EAAmB,GACtBK,EAAGL,EAAmB,IAGvB,SAASM,EAASC,GAErB,MAAO,CACHA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,IAGd,IAAMC,EAAgB,CACzB,SAAK,CAAC,EAAG,GACT,SAAK,CAAC,EAAG,GACT,SAAK,CAAC,EAAG,GACT,SAAK,CAAC,EAAG,IAEAC,EAAsB,CAC/B,SAAK,EACL,SAAK,GAGF,SAASC,EAAWC,GAEvB,OAAIA,EAAc,EACR,GAAN,OAAU,EAAEA,EAAZ,KACE,GAAN,OAAUA,EAAY,EAAtB,KAEG,IASDC,EAAwB,SAAIC,GAE9B,OAAO,SAACC,GAAD,OAAiBD,EAAE,2BAAIC,GAAL,IAASP,aAAcQ,EAAUD,EAAGP,mBAG1D,SAASS,EAAOC,GAEnB,OAEkCC,EAFLD,EAAGC,MAEgBC,EAFTF,EAAGE,OAEgCR,EAFxBM,EAAGN,aAIjDQ,GAAU,EA3BO,EA4BVX,EAAcU,GAAOC,EAAO,GACxB,IAAXA,EA7BiB,GA8BTR,EACL,GAR6DF,EAAoBQ,EAAGG,UAExF,IAA+BF,EAAcC,EAA0BR,EAQvE,SAASU,EAAcH,EAAcX,GAExC,OAAwB,IAApBA,EAAa,GACNe,KACHd,EAAcU,GAAO,GAAKX,EAAa,GACvCC,EAAcU,GAAO,GAAKX,EAAa,IACvCA,EAAa,GAEzB,IAAMgB,EAAO,SAACT,GAAD,OAAiBrB,EAAIK,EAAkB0B,KAAI,SAACL,GAAD,OAChDH,EAAO,2BAAIF,GAAL,IAASK,YAAWL,EAAGP,aAAaY,QACrCM,EAAMb,EAAsBW,GACnCG,EAAO,SAACZ,GAAD,OAAiBrB,EAAIK,EAAkB0B,KAAI,SAACL,EAA0BQ,GAA3B,OAChD,SAAAX,EAAO,2BAAIF,GAAL,IAASK,YAAY,GAAIL,EAAGP,aAAaY,QAC1CS,EAAMhB,EAAsBc,GAWlC,IAAMG,EAAmC,CAC5C,CAACC,KAAS,EAAGC,GAAK,IAAKC,MAAO,KAC9B,CAACF,KAAS,EAAGC,GAAK,IAAKC,MAAO,KAC9B,CAACF,KAAS,EAAGC,GAAK,IAAKC,MAAO,KAC9B,CAACF,KAAO,IAAKC,GAAK,IAAKC,KAAS,GAChC,CAACF,KAAO,IAAKC,GAAK,IAAKC,KAAS,GAChC,CAACF,KAAO,IAAKC,GAAI,KAAMC,KAAS,GAChC,CAACF,KAAO,IAAKC,GAAI,KAAMC,KAAS,GAChC,CAACF,KAAM,IAAMC,GAAI,IAAMC,KAAS,GAChC,CAACF,KAAM,KAAMC,GAAI,KAAMC,KAAS,GAChC,CAACF,KAAM,KAAMC,GAAI,KAAMC,KAAS,GAChC,CAACF,KAAM,KAAMC,GAAI,KAAMC,KAAS,GAChC,CAACF,KAAM,KAAMC,GAAI,KAAMC,KAAS,GAChC,CAACF,KAAM,IAAMC,GAAI,IAAMC,KAAS,IAEhBH,EAAaL,KAAI,SAACS,EAAGN,GAAJ,OAAUA,KAU/C,IAAMO,EAAsBtB,GAAsB,SAACE,GAM/C,IAJA,IAAMqB,EAAYN,EAAaf,EAAGH,aAC5ByB,GAAKD,EAAUJ,GAAKI,EAAUH,MArFf,EAuFjBK,EAAaC,cAAIF,GAJzB,WAKaT,GAEL7B,EAAkByC,SAAQ,SAACpB,GAEvB,IAAMqB,EAAIb,EAAIX,EAAO,2BAAIF,GAAL,IAASK,YA5FhB,EA6FT,GAAKqB,GAAKA,EAAIJ,GAEdC,EAAWI,IAAId,EAAGa,EAAGH,EAAWK,IAAIf,EAAGa,GAAK1B,EAAGP,aAAaY,QAP/DQ,EAAI,EAAGA,EAAIS,EAAGT,IACtB,EADQA,GAWT,OAAOU,EAAWM,eAETC,EAAiBhC,GAAsB,SAACE,GAKjD,IAHA,IAAMqB,EAAYN,EAAaf,EAAGH,aAC5ByB,GAAKD,EAAUJ,GAAKI,EAAUH,MAxGf,EAyGjBa,EAAcC,gBAAMV,EAAG,GAH/B,WAIaT,GAEL7B,EAAkByC,SAAQ,SAACpB,GAEvB,IAAMqB,EAAIb,EAAIX,EAAO,2BAAIF,GAAL,IAASK,YA9GhB,GA+GRqB,EAAI,GAAKJ,GAAKI,IAAO,EAAIxB,EAAO,2BAAIF,GAAL,IAASK,aAEzC0B,EAAYJ,IAAId,EAAG,EAAGkB,EAAYH,IAAIf,EAAG,GAAKb,EAAGP,aAAaY,QAPjEQ,EAAI,EAAGA,EAAIS,EAAGT,IACtB,EADQA,GAWT,OAAOtC,MAAMC,KAAK4C,EAAoBpB,GAAIiC,MAAMF,GAAaG,KAAKxB,KAAI,SAACyB,GAAD,OAAgBA,SAE9DrC,GAAsB,SAACE,GAE/C,IAAMoC,EAAKN,EAAe9B,GAC1B,OAAOzB,MAAMC,KAAK4C,EAAoBpB,GAAIiC,MAAM,IAAII,UAAQD,EAAG1B,KAAI,SAACyB,GAAD,MAAO,CAACA,QAAMD,KAAKxB,KAAI,SAACyB,EAAWtB,GAAZ,OAA0BsB,EAAEC,EAAGvB,UAMlGf,GAAsB,SAACE,GAE9C,IAAMsC,EAAKR,EAAe9B,GAAIU,KAAI,SAACyB,GAAD,OAAO,EAAEA,KAC3C,OAAO5D,MAAMC,KAAK4C,EAAoBpB,GAAIiC,MAAM,IAAII,UAAQC,EAAG5B,KAAI,SAACyB,GAAD,MAAO,CAACA,QAAMD,KAAKxB,KAAI,SAACyB,EAAWtB,GAAZ,OAA0BsB,EAAEG,EAAGzB,UAMtH,SAASZ,EAAUR,GAEtB,IAAM8C,EAAQ5D,EAAIa,EAASC,IAC3B,MAAO,CACHL,EAAGK,EAAa,GAAK8C,EACrBlD,EAAGI,EAAa,GAAK8C,EACrBjD,EAAGG,EAAa,GAAK8C,EACrBhD,EAAGE,EAAa,GAAK8C,GC7LtB,IAUMC,EAMT,WAAa/C,GACZ,yBALDgD,KAAsB,cAKtB,KAJAC,eAAiB,GAIjB,KAHAC,mBAGA,EACIC,KAAKD,cAAgBlD,GAIhBoD,EAAgB,IAAIL,EAAqBvD,EAAW,CAAC,KAAM,KAAM,KAAM,QAEvE6D,EAAb,WAMI,WAAaH,GACZ,yBALDF,KAAgB,QAKhB,KAJAC,oBAIA,OAHAC,mBAGA,EACIC,KAAKD,cAAgBA,EAR7B,6DAWqB9C,EAAqBJ,GAElC,IAAIsD,EAAG,YAAOH,KAAKD,eAEnB,OADAI,EAAIlD,GAAeJ,EACZ,IAAIqD,EAAYC,OAf/B,KAmBMC,EAOF,WACiBL,EACAM,GAChB,yBAFgBN,gBAEjB,KADiBM,eACjB,KARAR,KAAmB,WAQnB,KAPAC,oBAAiBQ,EAOjB,KALAC,MAAiB,SAOfC,EAOF,WACiBV,EACAO,GAChB,yBAFgBP,iBAEjB,KADiBO,eACjB,KARAR,KAAmB,WAQnB,KAPAE,cAAgC,GAOhC,KALAQ,MAAkB,UAQf,SAASE,EAAeJ,EAAsBP,GAEjD,IAAIC,EAAgC,GACpC,IAIIA,EAAgBtE,EAAKqE,GAAgBhC,KADR,SAAC4C,GAAD,OAAwBrE,EAAY,IAAIsE,SAAS,MAAON,EAApB,CAAyEK,OAG9I,SAEI,OAAO,IAAIF,EAAqBV,EAAgBO,GAEpD,OAAO,IAAID,EAAoBL,EAAeM,G,qEChF3C,SAASO,GAAsBC,GAElC,IAAMC,EAAK,cAACC,GAAA,EAAD,CAAkBC,KAAK,QADtC,EAE8BC,mBAASH,GAFvC,mBAEWP,EAFX,KAEkBW,EAFlB,KAGW/D,EAAW0D,EAAX1D,EAAGgE,EAAQN,EAARM,KAcV,OAbAC,qBAAU,WAEN,IAAIC,GAAa,EAKjB,OAJAlE,EAAEgE,GAAMG,MAAK,SAAC7D,GAEN4D,GAAYH,EAAS,mCAAGzD,QAEzB,WAEH4D,GAAa,EACbH,EAASJ,MAEd,CAAC3D,EAAGgE,IACA,mCAAGZ,ICTd,IAAMgB,GAAU,ICbD,WACb,OAAO,IAAIC,OAAO,IAA0B,wCDaxCC,GAAcC,YAAKH,IAElB,SAASI,GAAoBd,GAQhC,OAAO,eAACe,EAAA,EAAD,CAAOZ,KAAK,QAAZ,UACH,cAACa,GAAD,CAAsBlE,cAAekD,EAAMlD,gBAC3C,cAACmE,EAAA,EAAD,UAAYjB,EAAMd,cAAcjC,KAAI,SAACjB,EAAcoB,GAAf,OAAqB,cAAC8D,GAAD,CAErDpE,cAAekD,EAAMlD,cACrBH,MAAOqD,EAAMrD,MACbX,aAAcA,EACdI,YAAagB,EACbP,SAAUmD,EAAMnD,UALXO,MAML+D,eAGZ,SAASH,GAAqBhB,GAI1B,OAAO,cAACoB,EAAA,EAAD,UAAW,eAACC,EAAA,EAAD,WAClB,cAACC,GAAA,EAAD,gBACCtB,EAAMlD,cAAgB,cAACwE,GAAA,EAAD,iBAA4B,6BACnD,cAACA,GAAA,EAAD,kBACA,cAACA,GAAA,EAAD,kBACA,cAACA,GAAA,EAAD,UAAW,mBAAGC,KAAK,mDAAR,kBACX,cAACD,GAAA,EAAD,sBACA,cAACA,GAAA,EAAD,sBACA,cAACA,GAAA,EAAD,2BAGJ,SAASJ,GAAkBlB,GAEvB,OAAO,eAACqB,EAAA,EAAD,WACP,cAACC,GAAA,EAAD,UAAYnF,EAAW6D,EAAM5D,eAC5B4D,EAAMlD,cAAgB,cAACwE,GAAA,EAAD,UAAYxE,EAAckD,EAAMrD,MAAOqD,EAAMhE,gBAA6B,6BACjG,cAACsF,GAAA,EAAD,UAAYpE,EAAI8C,KAChB,cAACsB,GAAA,EAAD,UAAYjE,EAAI2C,KAChB,cAACsB,GAAA,EAAD,WHqCmB/E,EGrCAyD,EHuCZhD,EAAKT,GAAMY,EAAKZ,MGtCvB,cAAC+E,GAAA,EAAD,UAAW,cAACvB,GAAD,CAAiBO,KAAMN,EAAO1D,EAAGsE,GAAOY,kBACnD,cAACF,GAAA,EAAD,UAAW,cAACvB,GAAD,CAAiBO,KAAMN,EAAO1D,EAAGsE,GAAOa,gBACnD,cAACH,GAAA,EAAD,UAAW,cAACvB,GAAD,CAAiBO,KAAMN,EAAO1D,EAAGsE,GAAOc,kBHkChD,IAAgBnF,EKzFhB,SAASoF,GAAmB3B,GAE/B,IAAM4B,ENNH,SAAgBzG,GAEnB,IAAImE,EAAMnE,EAAO0G,MAAM,GAAI,GAK3B,OAJAvC,EAAItB,SAAQ,SAAChD,EAAGoC,GAERA,IAAGkC,EAAIlC,IAAMkC,EAAIlC,EAAE,OAEpB,CAACkC,EAAKA,EAAIuC,OAAO,GAAG,GAAK1G,EAAO0G,OAAO,GAAG,IMDvCC,CAAO9B,EAAM7E,QACvB,OAAO,cAAC4G,EAAA,EAAD,CAAQC,SAAU,SAACtD,EAAGvD,GAEC,kBAAXA,EACP8G,QAAQC,KAAK,uBAEblC,EAAMmC,UNFf,SAAkBC,EAAuBC,GAE5C,IAAMC,EAAG,sBAAOF,GAAP,CAAoBC,IACvBE,EAAG,CAAI,GAAJ,mBAAUH,IACnB,OAAOE,EAAIrF,KAAI,SAACjC,EAAGoC,GAAJ,OAAUpC,EAAEuH,EAAInF,MMFHoF,CAASrH,EAAQyG,EAAE,MAE3Ca,MAAOb,EAAE,GACTc,IAAK,EACLC,IAAKf,EAAE,KAIR,SAASgB,GAAiB5C,GAE7B,OAAO,cAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAf,SACF9C,EAAM7E,OAAO8B,KAAI,SAACjC,EAAGoC,GAAJ,OAAU,cAACyF,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAA0B,cAACC,EAAA,EAAD,CAAWR,MAAOzH,EAAGgH,SAAU,SAACkB,GAE9E,IAAI/H,EAAM,YAAO6E,EAAM7E,QACvBA,EAAOiC,GAAK+F,WAAWD,EAAME,OAAOX,OACpCzC,EAAMmC,UAAUhH,OAJ2BiC,QCpBpD,SAASiG,GAAiCrD,GAE7C,IAAM4B,EAAI1G,EAAI8E,EAAM7E,QACpB,OAAO,cAAC0H,EAAA,EAAD,CAAMC,WAAS,EAAf,SACF9C,EAAM7E,OAAO8B,KAAI,SAACjC,EAAGoC,GAAJ,OAAU,cAACyF,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAA0B,cAACM,EAAA,EAAD,UACjDtI,EAAE4G,KAD4CxE,QCqBpD,SAASmG,GAAiCC,GAChD,IADwEC,EACzE,uDADyF,GAErF,OAAO,SAACzD,GAAD,OAGD,eAAC0D,EAAA,EAAD,WACF,cAACC,EAAA,EAAD,UAAYF,IACZ,cAACG,EAAA,EAAD,CAAY5B,SAAU,SAACkB,GAAD,OAAgDlD,EAAM6D,SAASX,EAAME,OAAOX,QAAlG,SACKe,EAAQvG,KAAI,SAACjC,GAAD,OACT,cAAC8I,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,IAAWvB,MAAOzH,EAAGyI,MAAOzI,EAAGiJ,QAASjJ,IAAMgF,EAAMyC,iBAM/F,IAAMyB,GAAgBX,GPzCA,CAAC,SAAK,SAAK,SAAK,UOyCa,SAC7CY,GAAoBZ,GAnBA,CAAC,SAAU,QAmB0B,cACzDa,GAAqBb,GN5CA,CAAC,cAAe,QAAS,YM4Cc,eAC5Dc,GAAmBd,GP3CA,CAAC,SAAK,UO2C6B,aAErD,SAASe,GAAWtE,GAQvB,OAAO,eAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAf,UACH,cAACD,EAAA,EAAD,CAAME,MAAI,EAAV,SAAW,cAACqB,GAAD,CACP3B,MAAOzC,EAAMuE,WACbV,SAAU7D,EAAMwE,kBACpB,cAAC3B,EAAA,EAAD,CAAME,MAAI,EAAV,SAAW,cAACoB,GAAD,CACP1B,MAAOzC,EAAMyE,UACbZ,SAAU7D,EAAM0E,iBACpB,cAAC7B,EAAA,EAAD,CAAME,MAAI,EAAV,SAAW,cAACmB,GAAD,CACPzB,MAAOzC,EAAMrD,MACbkH,SAAU7D,EAAM2E,aACpB,cAAC9B,EAAA,EAAD,CAAME,MAAI,EAAV,SAAW,cAACsB,GAAD,CACP5B,MAAOzC,EAAMnD,SACbgH,SAAU7D,EAAM4E,mBAIrB,SAASC,GAAY7E,GAQxB,OAAO,qCACH,cAACsE,GAAD,aACIC,WAAYvE,EAAM8E,OAAO9F,KACzBwF,cAAe,SAACD,GAAD,OAA4BvE,EAAM+E,UNGtD,SAAyBR,GAE5B,OAAQA,GAEJ,IAAK,cAAe,OAAO,IAAIxF,EACvBvD,EAAW,CAAC,KAAM,KAAM,KAAM,QACtC,IAAK,QAAS,OAAO,IAAI6D,EACjBzE,EAAK,IAAIqC,KAAI,SAACS,GAAD,OAAOlC,EAAW,CAAC,IAAK,IAAK,IAAK,UACvD,IAAK,WAAY,OAAOoE,EAChB,kCACA,KMbuDoF,CAAgBT,MACvEvE,IAER,cAACiF,GAAD,eAA6BjF,IAC7B,cAACkF,GAAD,eAA4BlF,OAGpC,SAASiF,GAAwBjF,GAQ7B,IAAM8E,EAAS9E,EAAM8E,OACrB,GAAoB,gBAAhBA,EAAO9F,KAEP,OAAO,cAACmG,GAAD,aACHhK,OAAQY,EAAS+I,EAAO5F,eACxBiD,UAAW,SAAChH,GAAD,OAAsB6E,EAAM+E,UAC/B,IAAIhG,EAAqBvD,EAAWL,OACxC6E,IAEP,GAAoB,UAAhB8E,EAAO9F,KAEZ,OAAO,cAACoG,GAAD,aACHjK,OAAQ2J,EAAO5F,cAAcjC,IAAIlB,GACjCoG,UAAW,SAAChH,EAAkBiC,GAAnB,OACP4C,EAAM+E,UAAUD,EAAOO,iBAAiBjI,EAAG5B,EAAWL,OACtD6E,IAIR,IAAMf,EACe,WAAjB6F,EAAOpF,MACLoF,EAAO7F,eACP6F,EAAO5F,cAAcrE,OAC3B,OAAO,cAACyK,GAAD,aACHrG,eAAgBA,EAChBsG,kBAAmB,SAACtG,GAAD,OAA4Be,EAAM+E,UACjDnF,EAAekF,EAAOtF,aAAcP,KACxCwD,MAAOqC,EAAOtF,aACdqE,SAAU,SAACpB,GAAD,OAAmBzC,EAAM+E,UAAUnF,EAAe6C,EAAOxD,KACnEuG,QAA0B,WAAjBV,EAAOpF,OACZM,IAIhB,SAASsF,GAAoBtF,GAUzB,OAAO,qCACP,eAAC6C,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACI,eAACM,EAAA,EAAD,oDAA+BtD,EAAMf,eAArC,KAAuD9C,EAAW6D,EAAMf,gBAAxE,SAEJ,cAAC4D,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SAAc,cAACjB,EAAA,EAAD,CAAQW,IAAK,EAAGC,IAAK,GAC/BF,MAAOzC,EAAMf,eAAgB+C,SAAU,SAACtD,EAAG1D,GAEtB,kBAANA,EACPgF,EAAMuF,kBAAkBvK,GAExBiH,QAAQwD,MAAM,0CAG9B,sBAAKC,MAAO1F,EAAMwF,QAAU,CAACG,gBAAiB,WAAa,GAA3D,UACA,cAACrC,EAAA,EAAD,UAAa,kEACb,cAACA,EAAA,EAAD,iDACA,cAACA,EAAA,EAAD,UAAa,MACb,eAACT,EAAA,EAAD,CAAMC,WAAS,EAAf,UACA,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACf,cAACH,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAAb,SAAc,cAACC,EAAA,EAAD,CAAW2C,WAAS,EAACC,WAAS,EAACC,OAAO,QAAQC,KAAM,GAAIC,QAAS,GAAIC,QAAQ,SACvFxD,MAAOzC,EAAMyC,MAAOT,SAAU,SAACtD,GAAD,OAAOsB,EAAM6D,SAASnF,EAAE0E,OAAOX,eAGjE,cAACa,EAAA,EAAD,UAAa,MACb,cAACA,EAAA,EAAD,UAAa,yLAKjB,SAAS4B,GAAuBlF,GAO5B,IAAM8E,EAAS9E,EAAM8E,OACf5F,EACc,gBAAhB4F,EAAO9F,KACLpE,EAAKkK,EAAO7F,gBAAgBhC,KAAI,SAACb,GAAD,OAAyB0I,EAAO5F,iBAChE4F,EAAO5F,cACPpC,EACc,gBAAhBgI,EAAO9F,KACX,MAAoB,aAAhB8F,EAAO9F,MAAwC,WAAjB8F,EAAOpF,MAC9B,cAAC4D,EAAA,EAAD,6DACJ,cAACxC,GAAD,aACH5B,cAAeA,EACfpC,cAAeA,GACXkD,IAEL,SAASoF,GAAiBpF,GAS7B,OAAO,gCACH,cAACkG,EAAA,EAAD,CAAQD,QAAQ,WAAhB,eACCjG,EAAM7E,OAAO8B,KAAI,SAAC9B,EAAQiC,GAAT,OAClB,cAAC+I,GAAD,CACI1B,UAAWzE,EAAMyE,UACjBrI,YAAagB,EACbjC,OAAQA,EACRgH,UAAW,SAAChH,GAAD,OAAsB6E,EAAMmC,UAAUhH,EAAQiC,KACpDA,MACL+D,aAIL,SAASgE,GAA0BnF,GAQtC,OAAO,qCAAE,cAACmG,GAAD,CACL1B,UAAWzE,EAAMyE,UACjBtJ,OAAQ6E,EAAM7E,OACdgH,UAAWnC,EAAMmC,YACnB,eAACU,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAAkB,eAACM,EAAA,EAAD,iBAAgBxG,EAAckD,EAAMrD,MAAOnB,EAAWwE,EAAM7E,SAAS,OACvF,cAAC0H,EAAA,EAAD,UAKD,SAASsD,GAAkBnG,GAE9B,IAAMoG,EAAoC,WAApBpG,EAAMyE,UAAyB9C,GAAqBiB,GACtEyD,EAAyD,WAApBrG,EAAMyE,UAAyB,CAAC,EAAG,GAAK,CAAC,EAAG,GAKrF,YAJ0BhF,IAAtBO,EAAM5D,cAENiK,EAAO,IAAM,GAEV,eAACxD,EAAA,EAAD,CAAMC,WAAS,EAACwD,QAAQ,eAAeC,QAAS,EAAhD,eACwB9G,IAAtBO,EAAM5D,YAA4B,cAACyG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAAkB,cAACM,EAAA,EAAD,UAAanH,EAAW6D,EAAM5D,iBAAoC,6BACvH,cAACyG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAIqD,EAAO,GAAtB,SAA0B,cAACD,EAAD,CAAcjL,OAAQ6E,EAAM7E,OAAQgH,UAAWnC,EAAMmC,cAC/E,cAACU,EAAA,EAAD,CAAME,MAAI,EAACC,GAAIqD,EAAO,GAAtB,SAA0B,cAAChD,GAAD,CAAkClI,OAAQ6E,EAAM7E,cCzOtF,IAAMqL,GACN,CACI7J,MAAO,SACP8H,UAAW,SACXK,OAAQ1F,EACRvC,SAAU,UAsBC4J,OAnBf,WAAgB,IAAD,EACeC,IAAMtG,SAASoG,IAD9B,mBACJ9G,EADI,KACGW,EADH,KAEX,OAAO,qCAAE,cAACwE,GAAD,CACDlI,MAAO+C,EAAM/C,MACbgI,SAAU,SAAChI,GAAD,OAAkB0D,EAAS,2BAAIX,GAAL,IAAY/C,YAChD8H,UAAW/E,EAAM+E,UACjBC,aAAc,SAACD,GAAD,OAA0BpE,EAAS,2BAAIX,GAAL,IAAY+E,gBAC5DK,OAAQpF,EAAMoF,OACdC,UAAW,SAACD,GAAD,OAA2BzE,EAAS,2BAAIX,GAAL,IAAYoF,aAC1DjI,SAAU6C,EAAM7C,SAChB+H,YAAa,SAAC/H,GAAD,OAAwBwD,EAAS,2BAAIX,GAAL,IAAY7C,iBAE7D,cAACyG,EAAA,EAAD,UAAY,+BACR,yMACA,kKCtBGqD,GAZS,SAACC,GACnBA,GAAeA,aAAuB9G,UACxC,8BAAqBW,MAAK,YAAkD,IAA/CoG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOD,GACPE,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAQL,OCHdM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.4e7f2411.chunk.js","sourcesContent":["export const iota = (length: number) => Array.from({length: length}, (v, k) => k);\r\n\r\nexport function cumsum(values: number[]): [number[], number]\r\n{\r\n    let ret = values.slice(0, -1)\r\n    ret.forEach((v, i) =>\r\n    {\r\n        if (i) ret[i] += ret[i-1]\r\n    })\r\n    return [ret, ret.slice(-1)[0] + values.slice(-1)[0]]\r\n}\r\n\r\nexport function decumsum(partialSums: number[], totalSum: number)\r\n{\r\n    const lhs = [...partialSums, totalSum]\r\n    const rhs = [0, ...partialSums]\r\n    return lhs.map((v, i) => v-rhs[i])\r\n}\r\n\r\nexport const sum = (values: number[]) => values.reduce((partial: number, current: number) => partial + current, 0)\r\n","import { eye, NDArray, zeros } from 'vectorious'\n\nimport { sum } from '../numeric'\n\nexport const fields = ['鳳', '特', '上', '般'] as const\nexport const gameTypes = ['東', '南'] as const\nexport const individualResults = [1, 2, 3, 4] as const\n\nexport type Field = typeof fields[number]\nexport type GameType = typeof gameTypes[number]\nexport type IndividualResult = typeof individualResults[number]\nexport type Distribution = {\n    1: number,\n    2: number,\n    3: number,\n    4: number,\n}\nexport type SimpleDistribution = number[]\nexport function fromSimple(simpleDistribution: SimpleDistribution): Distribution\n{\n    if (simpleDistribution.length !== 4)\n        throw new Error('simpleDistribution must be of length 4')\n    return {\n        1: simpleDistribution[0],\n        2: simpleDistribution[1],\n        3: simpleDistribution[2],\n        4: simpleDistribution[3],\n    }\n}\nexport function toSimple(distribution: Distribution): SimpleDistribution\n{\n    return [\n        distribution[1],\n        distribution[2],\n        distribution[3],\n        distribution[4],\n    ]\n}\nexport const rewardOfField = {\n    '般': [2, 1],\n    '上': [4, 1],\n    '特': [5, 2],\n    '鳳': [6, 3],\n}\nexport const gameTypeCoefficient = {\n    '東': 2,\n    '南': 3,\n}\nexport const basePoint = 5\nexport function displayDan(internalDan: number)\n{\n    if (internalDan < 3)\n        return `${3-internalDan}K`\n    return `${internalDan-2}D`\n}\nexport const goal = 13;\nexport type Environment =\n{\n    field: Field,\n    internalDan: number,\n    gameType: GameType,\n}\nexport type EnvResult = Environment & {result: IndividualResult}\nexport type EnvDist = Environment & {distribution: Distribution}\nconst normalizeDistribution = <R>(f: (ed: EnvDist) => R) =>\n{\n    return (ed: EnvDist) => f({...ed, distribution: normalize(ed.distribution)})\n}\n\nexport function reward(er: EnvResult)\n{\n    return typeIndependentReward(er.field, er.result, er.internalDan) * gameTypeCoefficient[er.gameType]\n}\nexport function typeIndependentReward(field: Field, result: IndividualResult, internalDan: number)\n{\n    if (result <= 2)\n        return rewardOfField[field][result-1] * basePoint\n    if (result === 4)\n        return -internalDan * basePoint\n    return 0\n}\nexport function danEfficiency(field: Field, distribution: Distribution)\n{\n    if (distribution[4] === 0)\n        return Infinity\n    return (rewardOfField[field][0] * distribution[1] +\n            rewardOfField[field][1] * distribution[2]) /\n            distribution[4]\n}\nconst _adv = (ed: EnvDist) => sum(individualResults.map((result: IndividualResult) =>\n        reward({...ed, result}) * ed.distribution[result]))\nexport const adv = normalizeDistribution(_adv)\nconst _dif = (ed: EnvDist) => sum(individualResults.map((result: IndividualResult, i: number) =>\n        reward({...ed, result}) ** 2 * ed.distribution[result]))\nexport const dif = normalizeDistribution(_dif)\nexport function peclet(ed: EnvDist): number\n{\n    return _adv(ed) / _dif(ed)\n}\nexport type StructureElement =\n{\n    init: number,\n    up: number,\n    down: number,\n}\nexport const danStructure: StructureElement[] = [\n    {init:    0, up:  100, down: -100}, // 3K\n    {init:    0, up:  100, down: -100},\n    {init:    0, up:  100, down: -100},\n    {init:  200, up:  400, down:    0}, // 1D\n    {init:  400, up:  800, down:    0},\n    {init:  600, up: 1200, down:    0},\n    {init:  800, up: 1600, down:    0}, // 4D\n    {init: 1000, up: 2000, down:    0},\n    {init: 1200, up: 2400, down:    0},\n    {init: 1400, up: 2800, down:    0}, // 7D\n    {init: 1600, up: 3200, down:    0},\n    {init: 1800, up: 3600, down:    0},\n    {init: 2000, up: 4000, down:    0}, // 10D\n]\nexport const dans = danStructure.map((_, i) => i)\nfunction init(internalDan: number)\n{\n    const structure = danStructure[internalDan]\n    return (structure.init - structure.down) / basePoint\n}\nexport function promotionProb(ed: EnvDist): number\n{\n    return promotionProbs(ed)[init(ed.internalDan)]\n}\nconst promoteDemoteMatrix = normalizeDistribution((ed: EnvDist) =>\n{\n    const structure = danStructure[ed.internalDan]\n    const n = (structure.up - structure.down) / basePoint\n\n    let transition = eye(n)\n    for (let i = 0; i < n; i++)\n    {\n        individualResults.forEach((result: IndividualResult) =>\n        {\n            const j = i + reward({...ed, result}) / basePoint\n            if (0 <= j && j < n)\n            {\n                transition.set(i, j, transition.get(i, j) - ed.distribution[result])\n            }\n        })\n    }\n    return transition.transpose()\n})\nexport const promotionProbs = normalizeDistribution((ed: EnvDist) =>\n{\n    const structure = danStructure[ed.internalDan]\n    const n = (structure.up - structure.down) / basePoint\n    let promotion1g = zeros(n, 1)\n    for (let i = 0; i < n; i++)\n    {\n        individualResults.forEach((result: IndividualResult) =>\n        {\n            const j = i + reward({...ed, result}) / basePoint\n            if ((j < 0 || n <= j) && (0 < reward({...ed, result})))\n            {\n                promotion1g.set(i, 0, promotion1g.get(i, 0) - ed.distribution[result])\n            }\n        })\n    }\n    return Array.from(promoteDemoteMatrix(ed).solve(promotion1g).data.map((e: number) => -e))\n})\nexport const promotionEGs = normalizeDistribution((ed: EnvDist) =>\n{\n    const pp = promotionProbs(ed)\n    return Array.from(promoteDemoteMatrix(ed).solve(new NDArray(pp.map((e) => [e]))).data.map((e: number, i: number) => e/pp[i]))\n})\nexport function promotionEG(ed: EnvDist)\n{\n    return promotionEGs(ed)[init(ed.internalDan)]\n}\nexport const demotionEGs = normalizeDistribution((ed: EnvDist) =>\n{\n    const dp = promotionProbs(ed).map((e) => 1-e)\n    return Array.from(promoteDemoteMatrix(ed).solve(new NDArray(dp.map((e) => [e]))).data.map((e: number, i: number) => e/dp[i]))\n})\nexport function demotionEG(ed: EnvDist)\n{\n    return demotionEGs(ed)[init(ed.internalDan)]\n}\nexport function normalize(distribution: Distribution): Distribution\n{\n    const denom = sum(toSimple(distribution))\n    return {\n        1: distribution[1] / denom,\n        2: distribution[2] / denom,\n        3: distribution[3] / denom,\n        4: distribution[4] / denom,\n    }\n}\n","import { iota } from \"../numeric\";\r\nimport { Distribution, fromSimple } from \"../tenhou\";\r\n\r\nexport const playerTypes = ['independent', 'array', 'function'] as const\r\nexport type PlayerType = typeof playerTypes[number]\r\n\r\nexport interface Player\r\n{\r\n    kind: PlayerType,\r\n    maxInternalDan: undefined | number,\r\n    distributions: Distribution[] | Distribution,\r\n}\r\n\r\nexport class DanIndependentPlayer implements Player\r\n{\r\n    kind: 'independent' = 'independent'\r\n    maxInternalDan = 13\r\n    distributions: Distribution\r\n\r\n    constructor (distribution: Distribution)\r\n    {\r\n        this.distributions = distribution\r\n    }\r\n}\r\n\r\nexport const defaultPlayer = new DanIndependentPlayer(fromSimple([2500, 2500, 2500, 2500]))\r\n\r\nexport class ArrayPlayer implements Player\r\n{\r\n    kind: 'array' = 'array'\r\n    maxInternalDan: undefined\r\n    distributions: Distribution[]\r\n\r\n    constructor (distributions: Distribution[])\r\n    {\r\n        this.distributions = distributions\r\n    }\r\n\r\n    withDistribution(internalDan: number, distribution: Distribution)\r\n    {\r\n        let ret = [...this.distributions]\r\n        ret[internalDan] = distribution\r\n        return new ArrayPlayer(ret)\r\n    }\r\n}\r\n\r\nclass SoundFunctionPlayer implements Player\r\n{\r\n    kind: 'function' = 'function'\r\n    maxInternalDan = undefined\r\n\r\n    state: 'sound' = 'sound'\r\n\r\n    constructor (\r\n            readonly distributions: Distribution[],\r\n            readonly functionBody: string)\r\n    {}\r\n}\r\nclass BrokenFunctionPlayer implements Player\r\n{\r\n    kind: 'function' = 'function'\r\n    distributions: Distribution[] = []\r\n\r\n    state: 'broken' = 'broken'\r\n\r\n    constructor (\r\n            readonly maxInternalDan: number,\r\n            readonly functionBody: string)\r\n    {}\r\n}\r\nexport type FunctionPlayer = SoundFunctionPlayer | BrokenFunctionPlayer\r\nexport function functionPlayer(functionBody: string, maxInternalDan: number)\r\n{\r\n    let distributions: Distribution[] = []\r\n    try\r\n    {\r\n        // eslint-disable-next-line no-new-func\r\n        const distributionFunction = (currentDan: number) => fromSimple((new Function('dan', functionBody) as ((currentDan: number) => number[]))(currentDan))\r\n        distributions = iota(maxInternalDan).map(distributionFunction)\r\n    }\r\n    catch\r\n    {\r\n        return new BrokenFunctionPlayer(maxInternalDan, functionBody)\r\n    }\r\n    return new SoundFunctionPlayer(distributions, functionBody)\r\n}\r\n\r\nexport type DefinedPlayer = DanIndependentPlayer | ArrayPlayer | FunctionPlayer\r\nexport function defaultPlayerOf(playerType: PlayerType): DefinedPlayer\r\n{\r\n    switch (playerType)\r\n    {\r\n        case \"independent\": return new DanIndependentPlayer(\r\n                fromSimple([2500, 2500, 2500, 2500]))\r\n        case 'array': return new ArrayPlayer(\r\n                iota(13).map((_) => fromSimple([250, 250, 250, 250])))\r\n        case 'function': return functionPlayer(\r\n                'return [2500, 2500, 2500, 2500]',\r\n                13)\r\n    }\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nexport function LazyCalculation<P, S>(props: {f: (props: P) => Promise<S>, args: P})\r\n{\r\n    const cp = <CircularProgress size='1em' />\r\n    const [state, setState] = useState(cp)\r\n    const {f, args} = props\r\n    useEffect(() =>\r\n    {\r\n        let subscribed = true\r\n        f(args).then((result) =>\r\n        {\r\n            if (subscribed) setState(<>{result}</>)\r\n        })\r\n        return () => \r\n        {\r\n            subscribed = false\r\n            setState(cp)\r\n        }\r\n    }, [f, args])\r\n    return <>{state}</>\r\n}\r\n","import { wrap } from 'comlink'\r\n\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\n\r\nimport { adv, danEfficiency, dif, displayDan, Distribution, EnvDist, Field, GameType, peclet } from '../../tenhou'\r\n\r\nimport { LazyCalculation } from '../util'\r\n\r\nimport tenhouWorker from '../../tenhou/tenhou.worker'\r\nconst _tenhou = new tenhouWorker()\r\nconst tenhou: any = wrap(_tenhou)\r\n\r\nexport function DanInformationTable(props:\r\n{\r\n    distributions: Distribution[],\r\n    danEfficiency: boolean,\r\n    field: Field,\r\n    gameType: GameType,\r\n})\r\n{\r\n    return <Table size=\"small\">\r\n        <DanInformationHeader danEfficiency={props.danEfficiency}/>\r\n        <TableBody>{props.distributions.map((distribution, i) => <DanInformationRow\r\n            key={i}\r\n            danEfficiency={props.danEfficiency}\r\n            field={props.field}\r\n            distribution={distribution}\r\n            internalDan={i}\r\n            gameType={props.gameType}\r\n        />).reverse()}</TableBody>\r\n    </Table>\r\n}\r\nfunction DanInformationHeader(props: {\r\n    danEfficiency: boolean\r\n})\r\n{\r\n    return <TableHead><TableRow>\r\n    <TableCell>@</TableCell>\r\n    {props.danEfficiency ? <TableCell>DE</TableCell> : <></>}\r\n    <TableCell>adv</TableCell>\r\n    <TableCell>dif</TableCell>\r\n    <TableCell><a href=\"https://note.com/chanpukin/n/ne668771fe917#nhceu\">Pe</a></TableCell>\r\n    <TableCell>P↑</TableCell>\r\n    <TableCell>E↑</TableCell>\r\n    <TableCell>E↓</TableCell>\r\n    </TableRow></TableHead>\r\n}\r\nfunction DanInformationRow(props: EnvDist & {danEfficiency: boolean})\r\n{\r\n    return <TableRow>\r\n    <TableCell>{displayDan(props.internalDan)}</TableCell>\r\n    {props.danEfficiency ? <TableCell>{danEfficiency(props.field, props.distribution)}</TableCell> : <></>}\r\n    <TableCell>{adv(props)}</TableCell>\r\n    <TableCell>{dif(props)}</TableCell>\r\n    <TableCell>{peclet(props)}</TableCell>\r\n    <TableCell><LazyCalculation args={props} f={tenhou.promotionProb} /></TableCell>\r\n    <TableCell><LazyCalculation args={props} f={tenhou.promotionEG} /></TableCell>\r\n    <TableCell><LazyCalculation args={props} f={tenhou.demotionEG} /></TableCell>\r\n    </TableRow>\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/tenhou.worker.8d26eaad.js\");\n}\n","import Grid from '@material-ui/core/Grid'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nimport { cumsum, decumsum } from '../../numeric'\r\n\r\nexport function SliderDistribution(props: {values: number[], setValues: (values: number[]) => void})\r\n{\r\n    const a = cumsum(props.values)\r\n    return <Slider onChange={(e, values: number[] | number) =>\r\n        {\r\n            if (typeof values === 'number')\r\n                console.warn('single slider.value')\r\n            else\r\n                props.setValues(decumsum(values, a[1]))\r\n        }}\r\n        value={a[0]}\r\n        min={0}\r\n        max={a[1]}\r\n        />\r\n}\r\n\r\nexport function TextDistribution(props: {values: number[], setValues: (values: number[]) => void})\r\n{\r\n    return <Grid container>\r\n        {props.values.map((v, i) => <Grid item xs={3} key={i}><TextField value={v} onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n            {\r\n                let values = [...props.values]\r\n                values[i] = parseFloat(event.target.value)\r\n                props.setValues(values)\r\n            }}/></Grid>)}\r\n    </Grid>\r\n}\r\n","import Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { sum } from '../../numeric'\r\n\r\nexport function FloatingPointDistributionDisplay(props: {values: number[]})\r\n{\r\n    const a = sum(props.values)\r\n    return <Grid container>\r\n        {props.values.map((v, i) => <Grid item xs={3} key={i}><Typography>\r\n            {v/a}\r\n        </Typography></Grid>)}\r\n    </Grid>\r\n}\r\n","import React from 'react'\n\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Grid from '@material-ui/core/Grid'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport Slider from '@material-ui/core/Slider'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\n\nimport { DanIndependentPlayer, defaultPlayerOf, DefinedPlayer, functionPlayer, PlayerType, playerTypes } from '../player'\nimport {\n    Field, fields,\n    danEfficiency,\n    displayDan,\n    fromSimple, toSimple,\n    GameType, gameTypes,\n} from '../tenhou'\n\nimport { DanInformationTable } from './calculation/basic'\nimport { SliderDistribution, TextDistribution } from './distribution/input'\nimport { FloatingPointDistributionDisplay } from './distribution/output'\nimport { iota } from '../numeric'\n\nexport const inputTypes = ['slider', 'text'] as const\nexport type InputType = typeof inputTypes[number]\n\nexport function RadioSelector<LT extends string>(choices: readonly LT[], label: string = '')\n{\n    return (props: {\n        value: LT,\n        setValue: (value: LT) => void,\n    }) => <FormControl>\n        <FormLabel>{label}</FormLabel>\n        <RadioGroup onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.setValue(event.target.value as LT)}>\n            {choices.map((v: LT) =>\n                <FormControlLabel control={<Radio />} value={v} label={v} checked={v === props.value} />\n            )}\n        </RadioGroup>\n    </FormControl>\n}\n\nconst FieldSelector = RadioSelector<Field>(fields, 'Field')\nconst InputTypeSelector = RadioSelector<InputType>(inputTypes, 'Input Type')\nconst PlayerTypeSelector = RadioSelector<PlayerType>(playerTypes, 'Player Type')\nconst GameTypeSelector = RadioSelector<GameType>(gameTypes, 'Game Type')\n\nexport function Conditions(props:\n{\n    playerType: PlayerType, setPlayerType: (playreType: PlayerType) => void,\n    inputType: InputType, setInputType: (inputType: InputType) => void,\n    field: Field, setField: (field: Field) => void,\n    gameType: GameType, setGameType: (gameType: GameType) => void,\n})\n{\n    return <Grid container>\n        <Grid item><PlayerTypeSelector\n            value={props.playerType}\n            setValue={props.setPlayerType} /></Grid>\n        <Grid item><InputTypeSelector\n            value={props.inputType}\n            setValue={props.setInputType} /></Grid>\n        <Grid item><FieldSelector\n            value={props.field}\n            setValue={props.setField} /></Grid>\n        <Grid item><GameTypeSelector\n            value={props.gameType}\n            setValue={props.setGameType} /></Grid>\n    </Grid>\n}\n\nexport function PlayerInput(props:\n{\n    player: DefinedPlayer, setPlayer: (player: DefinedPlayer) => void,\n    inputType: InputType, setInputType: (inputType: InputType) => void,\n    field: Field, setField: (field: Field) => void,\n    gameType: GameType, setGameType: (gameType: GameType) => void,\n})\n{\n    return <>\n        <Conditions\n            playerType={props.player.kind}\n            setPlayerType={(playerType: PlayerType) => props.setPlayer(defaultPlayerOf(playerType))}\n            {...props}\n        />\n        <PlayerDistributionInput {...props} />\n        <PlayerDistributionInfo {...props} />\n    </>\n}\nfunction PlayerDistributionInput(props:\n{\n    player: DefinedPlayer, setPlayer: (player: DefinedPlayer) => void,\n    inputType: InputType,\n    field: Field,\n    gameType: GameType,\n})\n{\n    const player = props.player\n    if (player.kind === 'independent')\n    {\n        return <DanIndependentPlayerInput\n            values={toSimple(player.distributions)}\n            setValues={(values: number[]) => props.setPlayer(\n                    new DanIndependentPlayer(fromSimple(values)))}\n            {...props} />\n    }\n    else if (player.kind === 'array')\n    {\n        return <ArrayPlayerInput\n            values={player.distributions.map(toSimple)}\n            setValues={(values: number[], i: number) =>\n                props.setPlayer(player.withDistribution(i, fromSimple(values)))}\n            {...props} />\n    }\n    else\n    {\n        const maxInternalDan =\n            player.state === 'broken'\n            ? player.maxInternalDan\n            : player.distributions.length\n        return <FunctionPlayerInput\n            maxInternalDan={maxInternalDan}\n            setMaxInternalDan={(maxInternalDan: number) => props.setPlayer(\n                functionPlayer(player.functionBody, maxInternalDan))}\n            value={player.functionBody}\n            setValue={(value: string) => props.setPlayer(functionPlayer(value, maxInternalDan))}\n            isError={player.state === 'broken'}\n            {...props} />\n    }\n}\n\nfunction FunctionPlayerInput(props:\n{\n    field: Field, gameType: GameType,\n    maxInternalDan: number,\n    setMaxInternalDan: (maxInternalDan: number) => void,\n    value: string,\n    setValue: (value: string) => void,\n    isError: boolean,\n})\n{\n    return <>\n    <Grid container>\n        <Grid item xs={4}>\n            <Typography>段位上限 (exclusive): {props.maxInternalDan} ({displayDan(props.maxInternalDan)})</Typography>\n        </Grid>\n        <Grid item xs><Slider min={1} max={23}\n            value={props.maxInternalDan} onChange={(e, v) =>\n            {\n                if (typeof v === 'number')\n                    props.setMaxInternalDan(v)\n                else\n                    console.error('multiple maxInternalDan values')\n            }} /></Grid>\n    </Grid>\n    <div style={props.isError ? {backgroundColor: '#ffeeee'} : {}}>\n    <Typography>{\"// dan: 現在段位 (k級: 3-k; d段: d+2)\"}</Typography>\n    <Typography>function distribution(dan: number)</Typography>\n    <Typography>{'{'}</Typography>\n    <Grid container>\n    <Grid item xs={1}></Grid>\n    <Grid item xs><TextField fullWidth multiline margin='dense' rows={10} rowsMax={20} variant='filled'\n        value={props.value} onChange={(e) => props.setValue(e.target.value)} />\n    </Grid>\n    </Grid>\n    <Typography>{'}'}</Typography>\n    <Typography>{\"// 返却値: [1位, 2位, 3位, 4位] 比率 (合計は非0であればよい: 正規化は自動)\"}</Typography>\n    </div>\n    </>\n}\n\nfunction PlayerDistributionInfo(props:\n{\n    player: DefinedPlayer,\n    field: Field,\n    gameType: GameType,\n})\n{\n    const player = props.player\n    const distributions =\n        player.kind === 'independent'\n        ? iota(player.maxInternalDan).map((internalDan: number) => player.distributions)\n        : player.distributions\n    const danEfficiency =\n        player.kind !== 'independent'\n    if (player.kind === 'function' && player.state === 'broken')\n        return <Typography>Error in distribution(dan) function definition</Typography>\n    return <DanInformationTable\n        distributions={distributions}\n        danEfficiency={danEfficiency}\n        {...props} />\n}\nexport function ArrayPlayerInput(props:\n{\n    field: Field,\n    gameType: GameType,\n    inputType: InputType,\n    values: number[][],\n    setValues: (values: number[], at: number) => void,\n})\n{\n    return <div>\n        <Button variant=\"outlined\">+</Button>\n        {props.values.map((values, i) =>\n        <DistributionInput\n            inputType={props.inputType}\n            internalDan={i}\n            values={values}\n            setValues={(values: number[]) => props.setValues(values, i)}\n            key={i}\n        />).reverse()}\n    </div>\n}\n\nexport function DanIndependentPlayerInput(props: {\n    inputType: InputType,\n    gameType: GameType,\n    values: number[],\n    setValues: (values: number[]) => void,\n    field: Field,\n})\n{\n    return <><DistributionInput\n        inputType={props.inputType}\n        values={props.values}\n        setValues={props.setValues}\n    /><Grid container>\n        <Grid item xs={6}><Typography>DE={danEfficiency(props.field, fromSimple(props.values))-2}</Typography></Grid>\n        <Grid></Grid>\n    </Grid>\n    </>\n}\n\nexport function DistributionInput(props: {values: number[], setValues: (values: number[]) => void, inputType: InputType, internalDan?: number})\n{\n    const Distribution = (props.inputType === 'slider' ? SliderDistribution : TextDistribution)\n    let widths: [3|4|5|6|7|8, 3|4|5|6|7|8] = props.inputType === 'slider' ? [8, 4] : [6, 6]\n    if (props.internalDan !== undefined)\n    {\n        widths[1] -= 1\n    }\n    return <Grid container justify=\"space-around\" spacing={1}>\n            {props.internalDan !== undefined ? <Grid item xs={1}><Typography>{displayDan(props.internalDan)}</Typography></Grid> : <></> }\n            <Grid item xs={widths[0]}><Distribution values={props.values} setValues={props.setValues} /></Grid>\n            <Grid item xs={widths[1]}><FloatingPointDistributionDisplay values={props.values} /></Grid>\n        </Grid>\n}\n","import Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport './App.css'\nimport { PlayerInput, InputType } from './components'\nimport { defaultPlayer, DefinedPlayer } from './player'\nimport { Field, GameType } from './tenhou'\n\ntype AppState =\n{\n    field: Field,\n    inputType: InputType,\n    player: DefinedPlayer,\n    gameType: GameType,\n}\nconst initialState: AppState =\n{\n    field: '鳳',\n    inputType: 'slider',\n    player: defaultPlayer,\n    gameType: '南'\n}\n\nfunction App() {\n    const [state, setState] = React.useState(initialState)\n    return <><PlayerInput\n            field={state.field}\n            setField={(field: Field) => setState({...state, field})}\n            inputType={state.inputType}\n            setInputType={(inputType: InputType) => setState({...state, inputType})}\n            player={state.player}\n            setPlayer={(player: DefinedPlayer) => setState({...state, player})}\n            gameType={state.gameType}\n            setGameType={(gameType: GameType) => setState({...state, gameType})}\n        />\n        <Typography><ul>\n            <li>卓の昇降なし: 常に同じ卓で (七段未満も鳳凰卓で, etc) 打ち続ける</li>\n            <li>3級–1級の昇降あり: 初期0, 昇段100, 降段-100 を仮定</li>\n        </ul></Typography>\n        </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}