{"version":3,"sources":["numeric/index.ts","tenhou/index.ts","player/index.ts","components/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sum","values","reduce","partial","current","individualResults","fromSimple","simpleDistribution","length","Error","1","2","3","4","toSimple","distribution","rewardOfField","gameTypeCoefficient","normalizeDistribution","f","ed","normalize","reward","er","field","result","internalDan","gameType","_adv","map","adv","_dif","i","dif","danStructure","init","up","down","dans","_","structure","promotionProb","promotionProbs","PromoteDemoteMatrix","n","transition","eye","forEach","j","set","get","transpose","promotion1g","zeros","Array","from","solve","data","e","promotionEGs","pp","NDArray","promotionEG","demotionEGs","dp","demotionEG","denom","DanIndependentPlayer","kind","_distribution","this","defaultPlayer","ArrayPlayer","distributions","_distributions","currentDan","FunctionPlayer","RadioSelector","choices","label","props","FormControl","FormLabel","RadioGroup","onChange","event","setValue","target","value","v","FormControlLabel","control","Radio","checked","FieldSelector","InputTypeSelector","PlayerTypeSelector","GameTypeSelector","PlayerInput","player","playerType","setPlayer","defaultPlayerOf","inputType","setInputType","setField","setGameType","DanIndependentPlayerInput","setValues","setDistribution","Typography","DistributionInput","Grid","container","item","xs","Infinity","Table","size","TableHead","TableRow","TableCell","href","TableBody","slice","reverse","DanInformationRow","LazyCalculation","useState","CircularProgress","state","setState","useEffect","a","calculate","SliderDistribution","FloatingPointDistributionDisplay","TextDistribution","TextField","parseFloat","ret","cumsum","Slider","console","warn","partialSums","totalSum","lhs","rhs","decumsum","min","max","initialState","App","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2da30f58.chunk.js","sourcesContent":["export const iota = (length: number) => Array.from({length: length}, (v, k) => k);\r\n\r\nexport function cumsum(values: number[]): [number[], number]\r\n{\r\n    let ret = values.slice(0, -1)\r\n    ret.forEach((v, i) =>\r\n    {\r\n        if (i) ret[i] += ret[i-1]\r\n    })\r\n    return [ret, ret.slice(-1)[0] + values.slice(-1)[0]]\r\n}\r\n\r\nexport function decumsum(partialSums: number[], totalSum: number)\r\n{\r\n    const lhs = [...partialSums, totalSum]\r\n    const rhs = [0, ...partialSums]\r\n    return lhs.map((v, i) => v-rhs[i])\r\n}\r\n\r\nexport const sum = (values: number[]) => values.reduce((partial: number, current: number) => partial + current, 0)\r\n","import { eye, matrix, NDArray, zeros } from 'vectorious'\r\n\r\nimport { sum } from '../numeric'\r\n\r\nexport const fields = ['鳳', '特', '上', '般'] as const\r\nexport const gameTypes = ['東', '南'] as const\r\nexport const individualResults = [1, 2, 3, 4] as const\r\n\r\nexport type Field = typeof fields[number]\r\nexport type GameType = typeof gameTypes[number]\r\nexport type IndividualResult = typeof individualResults[number]\r\nexport type Distribution = {\r\n    1: number,\r\n    2: number,\r\n    3: number,\r\n    4: number,\r\n}\r\nexport type SimpleDistribution = number[]\r\nexport function fromSimple(simpleDistribution: SimpleDistribution): Distribution\r\n{\r\n    if (simpleDistribution.length !== 4)\r\n        throw new Error('simpleDistribution must be of length 4')\r\n    return {\r\n        1: simpleDistribution[0],\r\n        2: simpleDistribution[1],\r\n        3: simpleDistribution[2],\r\n        4: simpleDistribution[3],\r\n    }\r\n}\r\nexport function toSimple(distribution: Distribution): SimpleDistribution\r\n{\r\n    return [\r\n        distribution[1],\r\n        distribution[2],\r\n        distribution[3],\r\n        distribution[4],\r\n    ]\r\n}\r\nexport const rewardOfField = {\r\n    '般': [2, 1],\r\n    '上': [4, 1],\r\n    '特': [5, 2],\r\n    '鳳': [6, 3],\r\n}\r\nexport const gameTypeCoefficient = {\r\n    '東': 2,\r\n    '南': 3,\r\n}\r\nexport const basePoint = 5\r\nexport function displayDan(internalDan: number)\r\n{\r\n    if (internalDan < 3)\r\n        return `${3-internalDan}K`\r\n    return `${internalDan-2}D`\r\n}\r\nexport const goal = 13;\r\nexport type Environment =\r\n{\r\n    field: Field,\r\n    internalDan: number,\r\n    gameType: GameType,\r\n}\r\nexport type EnvResult = Environment & {result: IndividualResult}\r\nexport type EnvDist = Environment & {distribution: Distribution}\r\nconst normalizeDistribution = <R>(f: (ed: EnvDist) => R) =>\r\n{\r\n    return (ed: EnvDist) => f({...ed, distribution: normalize(ed.distribution)})\r\n}\r\n\r\nexport function reward(er: EnvResult)\r\n{\r\n    return typeIndependentReward(er.field, er.result, er.internalDan) * gameTypeCoefficient[er.gameType]\r\n}\r\nexport function typeIndependentReward(field: Field, result: IndividualResult, internalDan: number)\r\n{\r\n    if (result <= 2)\r\n        return rewardOfField[field][result-1] * basePoint\r\n    if (result === 4)\r\n        return -internalDan * basePoint\r\n    return 0\r\n}\r\nexport function danEfficiency(field: Field, distribution: Distribution)\r\n{\r\n    if (distribution[4] === 0)\r\n        return Infinity\r\n    return (rewardOfField[field][0] * distribution[1] +\r\n            rewardOfField[field][1] * distribution[2]) /\r\n            distribution[4]\r\n}\r\nconst _adv = (ed: EnvDist) => sum(individualResults.map((result: IndividualResult) =>\r\n        reward({...ed, result}) * ed.distribution[result]))\r\nexport const adv = normalizeDistribution(_adv)\r\nconst _dif = (ed: EnvDist) => sum(individualResults.map((result: IndividualResult, i: number) =>\r\n        reward({...ed, result}) ** 2 * ed.distribution[result]))\r\nexport const dif = normalizeDistribution(_dif)\r\nexport function peclet(ed: EnvDist): number\r\n{\r\n    return _adv(ed) / _dif(ed)\r\n}\r\nexport type StructureElement =\r\n{\r\n    init: number,\r\n    up: number,\r\n    down: number,\r\n}\r\nexport const danStructure: StructureElement[] = [\r\n    {init:    0, up:  100, down: -100}, // 3K\r\n    {init:    0, up:  100, down: -100},\r\n    {init:    0, up:  100, down: -100},\r\n    {init:  200, up:  400, down:    0}, // 1D\r\n    {init:  400, up:  800, down:    0},\r\n    {init:  600, up: 1200, down:    0},\r\n    {init:  800, up: 1600, down:    0}, // 4D\r\n    {init: 1000, up: 2000, down:    0},\r\n    {init: 1200, up: 2400, down:    0},\r\n    {init: 1400, up: 2800, down:    0}, // 7D\r\n    {init: 1600, up: 3200, down:    0},\r\n    {init: 1800, up: 3600, down:    0},\r\n    {init: 2000, up: 4000, down:    0}, // 10D\r\n]\r\nexport const dans = danStructure.map((_, i) => i)\r\nfunction init(internalDan: number)\r\n{\r\n    const structure = danStructure[internalDan]\r\n    return (structure.init - structure.down) / basePoint\r\n}\r\nexport function promotionProb(ed: EnvDist): number\r\n{\r\n    return promotionProbs(ed)[init(ed.internalDan)]\r\n}\r\nconst PromoteDemoteMatrix = normalizeDistribution((ed: EnvDist) =>\r\n{\r\n    const structure = danStructure[ed.internalDan]\r\n    const n = (structure.up - structure.down) / basePoint\r\n\r\n    let transition = eye(n)\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n        individualResults.forEach((result: IndividualResult) =>\r\n        {\r\n            const j = i + reward({...ed, result}) / basePoint\r\n            if (0 <= j && j < n)\r\n            {\r\n                transition.set(i, j, transition.get(i, j) - ed.distribution[result])\r\n            }\r\n        })\r\n    }\r\n    return transition.transpose()\r\n})\r\nexport const promotionProbs = normalizeDistribution((ed: EnvDist) =>\r\n{\r\n    const structure = danStructure[ed.internalDan]\r\n    const n = (structure.up - structure.down) / basePoint\r\n    let promotion1g = zeros(n, 1)\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n        individualResults.forEach((result: IndividualResult) =>\r\n        {\r\n            const j = i + reward({...ed, result}) / basePoint\r\n            if ((j < 0 || n <= j) && (0 < reward({...ed, result})))\r\n            {\r\n                promotion1g.set(i, 0, promotion1g.get(i, 0) - ed.distribution[result])\r\n            }\r\n        })\r\n    }\r\n    return Array.from(PromoteDemoteMatrix(ed).solve(promotion1g).data.map((e: number) => -e))\r\n})\r\nexport const promotionEGs = normalizeDistribution((ed: EnvDist) =>\r\n{\r\n    const pp = promotionProbs(ed)\r\n    return Array.from(PromoteDemoteMatrix(ed).solve(new NDArray(pp.map((e) => [e]))).data.map((e: number, i: number) => e/pp[i]))\r\n})\r\nexport function promotionEG(ed: EnvDist)\r\n{\r\n    return promotionEGs(ed)[init(ed.internalDan)]\r\n}\r\nexport const demotionEGs = normalizeDistribution((ed: EnvDist) =>\r\n{\r\n    const dp = promotionProbs(ed).map((e) => 1-e)\r\n    return Array.from(PromoteDemoteMatrix(ed).solve(new NDArray(dp.map((e) => [e]))).data.map((e: number, i: number) => e/dp[i]))\r\n})\r\nexport function demotionEG(ed: EnvDist)\r\n{\r\n    return demotionEGs(ed)[init(ed.internalDan)]\r\n}\r\nexport function normalize(distribution: Distribution): Distribution\r\n{\r\n    const denom = sum(toSimple(distribution))\r\n    return {\r\n        1: distribution[1] / denom,\r\n        2: distribution[2] / denom,\r\n        3: distribution[3] / denom,\r\n        4: distribution[4] / denom,\r\n    }\r\n}\r\n","import { Distribution, fromSimple } from \"../tenhou\";\r\n\r\nexport const playerTypes = ['independent', 'array', 'function'] as const\r\nexport type PlayerType = typeof playerTypes[number]\r\n\r\nexport class DanIndependentPlayer\r\n{\r\n    kind: 'independent' = 'independent'\r\n    private _distribution: Distribution\r\n    constructor (distribution: Distribution)\r\n    {\r\n        this._distribution = distribution\r\n    }\r\n    distribution(): Distribution\r\n    {\r\n        return this._distribution\r\n    }\r\n    setDistribution(distribution: Distribution)\r\n    {\r\n        this._distribution = distribution\r\n        return this\r\n    }\r\n}\r\n\r\nexport const defaultPlayer = new DanIndependentPlayer(fromSimple([2500, 2500, 2500, 2500]))\r\n\r\nexport class ArrayPlayer\r\n{\r\n    kind: 'array' = 'array'\r\n    private _distributions: Distribution[]\r\n    constructor (distributions: Distribution[])\r\n    {\r\n        this._distributions = distributions\r\n    }\r\n    distribution(currentDan: number): Distribution\r\n    {\r\n        return this._distributions[currentDan]\r\n    }\r\n    setDistribution(distribution: Distribution, currentDan: number)\r\n    {\r\n        this._distributions[currentDan] = distribution\r\n        return this\r\n    }\r\n}\r\n\r\nexport class FunctionPlayer\r\n{\r\n    kind: 'function' = 'function'\r\n    distribution: (currentDan: number) => Distribution\r\n    constructor (distribution: (currentDan: number) => Distribution)\r\n    {\r\n        this.distribution = distribution\r\n    }\r\n    setDistribution(distribution: (currentDan: number) => Distribution)\r\n    {\r\n        this.distribution = distribution\r\n        return this\r\n    }\r\n}\r\n\r\nexport type Player = DanIndependentPlayer | ArrayPlayer | FunctionPlayer\r\nexport function defaultPlayerOf(playerType: PlayerType): Player\r\n{\r\n    switch (playerType)\r\n    {\r\n        case \"independent\": return new DanIndependentPlayer(fromSimple([2500, 2500, 2500, 2500]))\r\n        case 'array': return new ArrayPlayer([\r\n            fromSimple([250, 250, 250, 250]), // 3K\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 1D\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 4D\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 7D\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]),\r\n            fromSimple([250, 250, 250, 250]), // 10D\r\n        ])\r\n        case 'function': return new FunctionPlayer((currentDan: number) => fromSimple([2500, 2500, 2500, 2500]))\r\n    }\r\n}","import React, { Suspense, useEffect, useState } from 'react'\r\n\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport Slider from '@material-ui/core/Slider'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\n\r\nimport { DanIndependentPlayer, defaultPlayerOf, Player, PlayerType, playerTypes } from '../player'\r\nimport {\r\n    Field, fields,\r\n    dans,\r\n    EnvDist,\r\n    danEfficiency,\r\n    displayDan,\r\n    Distribution,\r\n    adv, dif, peclet,\r\n    fromSimple, toSimple,\r\n    GameType, gameTypes,\r\n    promotionProb, promotionEG, demotionEG, demotionEGs,\r\n} from '../tenhou'\r\nimport { cumsum, decumsum, sum } from '../numeric'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nexport const inputTypes = ['slider', 'text'] as const\r\nexport type InputType = typeof inputTypes[number]\r\n\r\n\r\nexport function RadioSelector<LT extends string>(choices: readonly LT[], label: string = '')\r\n{\r\n    return (props: {\r\n        value: LT,\r\n        setValue: (value: LT) => void,\r\n    }) => <FormControl>\r\n        <FormLabel>{label}</FormLabel>\r\n        <RadioGroup onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.setValue(event.target.value as LT)}>\r\n            {choices.map((v: LT) =>\r\n                <FormControlLabel control={<Radio />} value={v} label={v} checked={v === props.value} />\r\n            )}\r\n        </RadioGroup>\r\n    </FormControl>\r\n}\r\n\r\nconst FieldSelector = RadioSelector<Field>(fields, 'Field')\r\nconst InputTypeSelector = RadioSelector<InputType>(inputTypes, 'Input Type')\r\nconst PlayerTypeSelector = RadioSelector<PlayerType>(playerTypes, 'Player Type')\r\nconst GameTypeSelector = RadioSelector<GameType>(gameTypes, 'Game Type')\r\n\r\nexport function PlayerInput(props:\r\n    {\r\n        player: Player, setPlayer: (player: Player) => void,\r\n        inputType: InputType, setInputType: (inputType: InputType) => void,\r\n        field: Field, setField: (field: Field) => void,\r\n        gameType: GameType, setGameType: (gameType: GameType) => void,\r\n    })\r\n{\r\n    const player = props.player\r\n    return <>\r\n        <PlayerTypeSelector value={props.player.kind} setValue={\r\n            (playerType: PlayerType) => props.setPlayer(defaultPlayerOf(playerType))\r\n        } />\r\n        <InputTypeSelector value={props.inputType} setValue={props.setInputType} />\r\n        <FieldSelector value={props.field} setValue={props.setField} />\r\n        <GameTypeSelector value={props.gameType} setValue={props.setGameType} />\r\n        {(() => {\r\n            if (player.kind === 'independent')\r\n            {\r\n                const distribution = player.distribution()\r\n                const setDistribution = (_distribution: Distribution) => props.setPlayer(player.setDistribution(_distribution))\r\n                return <>\r\n                    <DanIndependentPlayerInput\r\n                        inputType={props.inputType}\r\n                        values={toSimple(distribution)}\r\n                        setValues={(values: number[]) => setDistribution(fromSimple(values))}\r\n                        field={props.field}\r\n                        gameType={props.gameType}\r\n                    /></>\r\n            }\r\n            else return <Typography>Not Supported Yet</Typography>\r\n        })()}\r\n    </>\r\n}\r\n\r\nexport function DanIndependentPlayerInput(props: {\r\n    inputType: InputType,\r\n    gameType: GameType,\r\n    values: number[],\r\n    setValues: (values: number[]) => void,\r\n    field: Field,\r\n})\r\n{\r\n    return <><DistributionInput\r\n        inputType={props.inputType}\r\n        values={props.values}\r\n        setValues={props.setValues}\r\n    /><Grid container>\r\n        <Grid item xs={6}><Typography>DE={danEfficiency(props.field, fromSimple(props.values))-2}</Typography></Grid>\r\n        <Grid></Grid>\r\n    </Grid>\r\n    <Table size=\"small\"><TableHead><TableRow>\r\n        <TableCell>@</TableCell>\r\n        <TableCell>adv</TableCell>\r\n        <TableCell>dif</TableCell>\r\n        <TableCell><a href=\"https://note.com/chanpukin/n/ne668771fe917#nhceu\">Pe</a></TableCell>\r\n        <TableCell>P↑</TableCell>\r\n        <TableCell>E↑</TableCell>\r\n        <TableCell>E↓</TableCell>\r\n        </TableRow></TableHead>\r\n        <TableBody>{dans.slice().reverse().map((v: number, i: number) => <DanInformationRow\r\n            key={i}\r\n            field={props.field}\r\n            distribution={fromSimple(props.values)}\r\n            internalDan={v}\r\n            gameType={props.gameType}\r\n        />)}</TableBody>\r\n    </Table>\r\n    </>\r\n}\r\nfunction DanInformationRow(props: EnvDist)\r\n{\r\n    return <TableRow>\r\n    <TableCell>{displayDan(props.internalDan)}</TableCell>\r\n    <TableCell>{adv(props)}</TableCell>\r\n    <TableCell>{dif(props)}</TableCell>\r\n    <TableCell>{peclet(props)}</TableCell>\r\n    <TableCell><LazyCalculation {...props} f={promotionProb} /></TableCell>\r\n    <TableCell><LazyCalculation {...props} f={promotionEG} /></TableCell>\r\n    <TableCell><LazyCalculation {...props} f={demotionEG} /></TableCell>\r\n    </TableRow>\r\n}\r\n\r\nconst LazyCalculation = <P, S>(props: P & {f: (props: P) => S}) =>\r\n    {\r\n        const [state, setState] = useState(<CircularProgress />)\r\n        useEffect(() =>\r\n        {\r\n            const calculate = async() =>\r\n            {\r\n                const result = props.f(props)\r\n                setState(<>{result}</>)\r\n            }\r\n            calculate()\r\n        }, [props])\r\n        return <>{state}</>\r\n    }\r\n\r\nexport function DistributionInput(props: {values: number[], setValues: (values: number[]) => void, inputType: InputType})\r\n{\r\n    if (props.inputType === 'slider')\r\n        return <Grid container>\r\n            <Grid item xs={8}><SliderDistribution values={props.values} setValues={props.setValues} /></Grid>\r\n            <Grid item xs={4}><FloatingPointDistributionDisplay values={props.values} /></Grid>\r\n        </Grid>\r\n    else\r\n        return <Grid container>\r\n            <Grid item xs={6}><TextDistribution values={props.values} setValues={props.setValues} /></Grid>\r\n            <Grid item xs={6}><FloatingPointDistributionDisplay values={props.values} /></Grid>\r\n        </Grid>\r\n}\r\n\r\nexport function TextDistribution(props: {values: number[], setValues: (values: number[]) => void})\r\n{\r\n    return <Grid container>\r\n        {props.values.map((v, i) => <Grid item xs={3} key={i}><TextField value={v} onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n            {\r\n                let values = [...props.values]\r\n                values[i] = parseFloat(event.target.value)\r\n                props.setValues(values)\r\n            }}/></Grid>)}\r\n    </Grid>\r\n}\r\n\r\nexport function SliderDistribution(props: {values: number[], setValues: (values: number[]) => void})\r\n{\r\n    const a = cumsum(props.values)\r\n    return <Slider onChange={(e, values: number[] | number) =>\r\n        {\r\n            if (typeof values === 'number')\r\n                console.warn('single slider.value')\r\n            else\r\n                props.setValues(decumsum(values, a[1]))\r\n        }}\r\n        value={a[0]}\r\n        min={0}\r\n        max={a[1]}\r\n        />\r\n}\r\n\r\nexport function FloatingPointDistributionDisplay(props: {values: number[]})\r\n{;\r\n    const a = sum(props.values)\r\n    return <Grid container>\r\n        {props.values.map((v, i) => <Grid item xs={3} key={i}><Typography>\r\n            {v/a}\r\n        </Typography></Grid>)}\r\n    </Grid>\r\n}\r\n","import Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport './App.css'\nimport { PlayerInput, InputType } from './components'\nimport { Player, defaultPlayer } from './player'\nimport { Field, GameType } from './tenhou'\n\ntype AppState =\n{\n    field: Field,\n    inputType: InputType,\n    player: Player,\n    gameType: GameType,\n}\nconst initialState: AppState =\n{\n    field: '鳳',\n    inputType: 'slider',\n    player: defaultPlayer,\n    gameType: '南'\n}\n\nfunction App() {\n    const [state, setState] = React.useState(initialState)\n    return <><PlayerInput\n            field={state.field}\n            setField={(field: Field) => setState({...state, field})}\n            inputType={state.inputType}\n            setInputType={(inputType: InputType) => setState({...state, inputType})}\n            player={state.player}\n            setPlayer={(player: Player) => setState({...state, player})}\n            gameType={state.gameType}\n            setGameType={(gameType: GameType) => setState({...state, gameType})}\n        />\n        <Typography><ul>\n            <li>卓の昇降なし: 常に同じ卓で (七段未満も鳳凰卓で, etc) 打ち続ける</li>\n            <li>3級–1級の昇降あり: 初期0, 昇段100, 降段-100 を仮定</li>\n        </ul></Typography>\n        </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}